// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package incognito_proxy

import (
	"math/big"
	"strings"

	ethereum "github.com/incognitochain/incognito-chain/ethrelaying"
	"github.com/incognitochain/incognito-chain/ethrelaying/accounts/abi"
	"github.com/incognitochain/incognito-chain/ethrelaying/accounts/abi/bind"
	"github.com/incognitochain/incognito-chain/ethrelaying/common"
	"github.com/incognitochain/incognito-chain/ethrelaying/core/types"
	"github.com/incognitochain/incognito-chain/ethrelaying/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IncognitoProxyABI is the input ABI used to generate the binding from.
const IncognitoProxyABI = "[{\"name\":\"SwapBeaconCommittee\",\"inputs\":[{\"type\":\"bytes32\",\"name\":\"newCommitteeRoot\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SwapBridgeCommittee\",\"inputs\":[{\"type\":\"bytes32\",\"name\":\"newCommitteeRoot\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NotifyString\",\"inputs\":[{\"type\":\"string\",\"name\":\"content\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NotifyBytes32\",\"inputs\":[{\"type\":\"bytes32\",\"name\":\"content\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NotifyBool\",\"inputs\":[{\"type\":\"bool\",\"name\":\"content\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NotifyUint256\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"content\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_beaconCommRoot\"},{\"type\":\"bytes32\",\"name\":\"_bridgeCommRoot\"}],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"parseSwapInst\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"},{\"type\":\"bytes32\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes\",\"name\":\"inst\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2862},{\"name\":\"notifyPls\",\"outputs\":[],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"v\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":4417},{\"name\":\"inMerkleTree\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"leaf\"},{\"type\":\"bytes32\",\"name\":\"root\"},{\"type\":\"bytes32[4]\",\"name\":\"path\"},{\"type\":\"bool[4]\",\"name\":\"left\"},{\"type\":\"int128\",\"name\":\"length\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":3245},{\"name\":\"verifyInst\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"commRoot\"},{\"type\":\"bytes32\",\"name\":\"instHash\"},{\"type\":\"bytes32[4]\",\"name\":\"instPath\"},{\"type\":\"bool[4]\",\"name\":\"instPathIsLeft\"},{\"type\":\"int128\",\"name\":\"instPathLen\"},{\"type\":\"bytes32\",\"name\":\"instRoot\"},{\"type\":\"bytes32\",\"name\":\"blkHash\"},{\"type\":\"bytes\",\"name\":\"signerPubkeys\"},{\"type\":\"int128\",\"name\":\"signerCount\"},{\"type\":\"bytes32\",\"name\":\"signerSig\"},{\"type\":\"bytes32[64]\",\"name\":\"signerPaths\"},{\"type\":\"bool[64]\",\"name\":\"signerPathIsLeft\"},{\"type\":\"int128\",\"name\":\"signerPathLen\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":181709},{\"name\":\"instructionApproved\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"instHash\"},{\"type\":\"bytes32[4]\",\"name\":\"beaconInstPath\"},{\"type\":\"bool[4]\",\"name\":\"beaconInstPathIsLeft\"},{\"type\":\"int128\",\"name\":\"beaconInstPathLen\"},{\"type\":\"bytes32\",\"name\":\"beaconInstRoot\"},{\"type\":\"bytes32\",\"name\":\"beaconBlkData\"},{\"type\":\"bytes32\",\"name\":\"beaconBlkHash\"},{\"type\":\"bytes\",\"name\":\"beaconSignerPubkeys\"},{\"type\":\"int128\",\"name\":\"beaconSignerCount\"},{\"type\":\"bytes32\",\"name\":\"beaconSignerSig\"},{\"type\":\"bytes32[64]\",\"name\":\"beaconSignerPaths\"},{\"type\":\"bool[64]\",\"name\":\"beaconSignerPathIsLeft\"},{\"type\":\"int128\",\"name\":\"beaconSignerPathLen\"},{\"type\":\"bytes32[4]\",\"name\":\"bridgeInstPath\"},{\"type\":\"bool[4]\",\"name\":\"bridgeInstPathIsLeft\"},{\"type\":\"int128\",\"name\":\"bridgeInstPathLen\"},{\"type\":\"bytes32\",\"name\":\"bridgeInstRoot\"},{\"type\":\"bytes32\",\"name\":\"bridgeBlkData\"},{\"type\":\"bytes32\",\"name\":\"bridgeBlkHash\"},{\"type\":\"bytes\",\"name\":\"bridgeSignerPubkeys\"},{\"type\":\"int128\",\"name\":\"bridgeSignerCount\"},{\"type\":\"bytes32\",\"name\":\"bridgeSignerSig\"},{\"type\":\"bytes32[64]\",\"name\":\"bridgeSignerPaths\"},{\"type\":\"bool[64]\",\"name\":\"bridgeSignerPathIsLeft\"},{\"type\":\"int128\",\"name\":\"bridgeSignerPathLen\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":548659},{\"name\":\"swapCommittee\",\"outputs\":[{\"type\":\"bool\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"bytes\",\"name\":\"inst\"},{\"type\":\"bytes32[4]\",\"name\":\"beaconInstPath\"},{\"type\":\"bool[4]\",\"name\":\"beaconInstPathIsLeft\"},{\"type\":\"int128\",\"name\":\"beaconInstPathLen\"},{\"type\":\"bytes32\",\"name\":\"beaconInstRoot\"},{\"type\":\"bytes32\",\"name\":\"beaconBlkData\"},{\"type\":\"bytes32\",\"name\":\"beaconBlkHash\"},{\"type\":\"bytes\",\"name\":\"beaconSignerPubkeys\"},{\"type\":\"int128\",\"name\":\"beaconSignerCount\"},{\"type\":\"bytes32\",\"name\":\"beaconSignerSig\"},{\"type\":\"bytes32[64]\",\"name\":\"beaconSignerPaths\"},{\"type\":\"bool[64]\",\"name\":\"beaconSignerPathIsLeft\"},{\"type\":\"int128\",\"name\":\"beaconSignerPathLen\"},{\"type\":\"bytes32[4]\",\"name\":\"bridgeInstPath\"},{\"type\":\"bool[4]\",\"name\":\"bridgeInstPathIsLeft\"},{\"type\":\"int128\",\"name\":\"bridgeInstPathLen\"},{\"type\":\"bytes32\",\"name\":\"bridgeInstRoot\"},{\"type\":\"bytes32\",\"name\":\"bridgeBlkData\"},{\"type\":\"bytes32\",\"name\":\"bridgeBlkHash\"},{\"type\":\"bytes\",\"name\":\"bridgeSignerPubkeys\"},{\"type\":\"int128\",\"name\":\"bridgeSignerCount\"},{\"type\":\"bytes32\",\"name\":\"bridgeSignerSig\"},{\"type\":\"bytes32[64]\",\"name\":\"bridgeSignerPaths\"},{\"type\":\"bool[64]\",\"name\":\"bridgeSignerPathIsLeft\"},{\"type\":\"int128\",\"name\":\"bridgeSignerPathLen\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":1137242},{\"name\":\"beaconCommRoot\",\"outputs\":[{\"type\":\"bytes32\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":663},{\"name\":\"bridgeCommRoot\",\"outputs\":[{\"type\":\"bytes32\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":693}]"

// IncognitoProxyBin is the compiled bytecode used for deploying new contracts.
const IncognitoProxyBin = ``

// DeployIncognitoProxy deploys a new Ethereum contract, binding an instance of IncognitoProxy to it.
func DeployIncognitoProxy(auth *bind.TransactOpts, backend bind.ContractBackend, _beaconCommRoot [32]byte, _bridgeCommRoot [32]byte) (common.Address, *types.Transaction, *IncognitoProxy, error) {
	parsed, err := abi.JSON(strings.NewReader(IncognitoProxyABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IncognitoProxyBin), backend, _beaconCommRoot, _bridgeCommRoot)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &IncognitoProxy{IncognitoProxyCaller: IncognitoProxyCaller{contract: contract}, IncognitoProxyTransactor: IncognitoProxyTransactor{contract: contract}, IncognitoProxyFilterer: IncognitoProxyFilterer{contract: contract}}, nil
}

// IncognitoProxy is an auto generated Go binding around an Ethereum contract.
type IncognitoProxy struct {
	IncognitoProxyCaller     // Read-only binding to the contract
	IncognitoProxyTransactor // Write-only binding to the contract
	IncognitoProxyFilterer   // Log filterer for contract events
}

// IncognitoProxyCaller is an auto generated read-only Go binding around an Ethereum contract.
type IncognitoProxyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncognitoProxyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IncognitoProxyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncognitoProxyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IncognitoProxyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncognitoProxySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IncognitoProxySession struct {
	Contract     *IncognitoProxy   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IncognitoProxyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IncognitoProxyCallerSession struct {
	Contract *IncognitoProxyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IncognitoProxyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IncognitoProxyTransactorSession struct {
	Contract     *IncognitoProxyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IncognitoProxyRaw is an auto generated low-level Go binding around an Ethereum contract.
type IncognitoProxyRaw struct {
	Contract *IncognitoProxy // Generic contract binding to access the raw methods on
}

// IncognitoProxyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IncognitoProxyCallerRaw struct {
	Contract *IncognitoProxyCaller // Generic read-only contract binding to access the raw methods on
}

// IncognitoProxyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IncognitoProxyTransactorRaw struct {
	Contract *IncognitoProxyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIncognitoProxy creates a new instance of IncognitoProxy, bound to a specific deployed contract.
func NewIncognitoProxy(address common.Address, backend bind.ContractBackend) (*IncognitoProxy, error) {
	contract, err := bindIncognitoProxy(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IncognitoProxy{IncognitoProxyCaller: IncognitoProxyCaller{contract: contract}, IncognitoProxyTransactor: IncognitoProxyTransactor{contract: contract}, IncognitoProxyFilterer: IncognitoProxyFilterer{contract: contract}}, nil
}

// NewIncognitoProxyCaller creates a new read-only instance of IncognitoProxy, bound to a specific deployed contract.
func NewIncognitoProxyCaller(address common.Address, caller bind.ContractCaller) (*IncognitoProxyCaller, error) {
	contract, err := bindIncognitoProxy(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyCaller{contract: contract}, nil
}

// NewIncognitoProxyTransactor creates a new write-only instance of IncognitoProxy, bound to a specific deployed contract.
func NewIncognitoProxyTransactor(address common.Address, transactor bind.ContractTransactor) (*IncognitoProxyTransactor, error) {
	contract, err := bindIncognitoProxy(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyTransactor{contract: contract}, nil
}

// NewIncognitoProxyFilterer creates a new log filterer instance of IncognitoProxy, bound to a specific deployed contract.
func NewIncognitoProxyFilterer(address common.Address, filterer bind.ContractFilterer) (*IncognitoProxyFilterer, error) {
	contract, err := bindIncognitoProxy(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyFilterer{contract: contract}, nil
}

// bindIncognitoProxy binds a generic wrapper to an already deployed contract.
func bindIncognitoProxy(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IncognitoProxyABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IncognitoProxy *IncognitoProxyRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IncognitoProxy.Contract.IncognitoProxyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IncognitoProxy *IncognitoProxyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.IncognitoProxyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IncognitoProxy *IncognitoProxyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.IncognitoProxyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IncognitoProxy *IncognitoProxyCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _IncognitoProxy.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IncognitoProxy *IncognitoProxyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IncognitoProxy *IncognitoProxyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.contract.Transact(opts, method, params...)
}

// BeaconCommRoot is a free data retrieval call binding the contract method 0xc4ed3f08.
//
// Solidity: function beaconCommRoot() constant returns(bytes32 out)
func (_IncognitoProxy *IncognitoProxyCaller) BeaconCommRoot(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "beaconCommRoot")
	return *ret0, err
}

// BeaconCommRoot is a free data retrieval call binding the contract method 0xc4ed3f08.
//
// Solidity: function beaconCommRoot() constant returns(bytes32 out)
func (_IncognitoProxy *IncognitoProxySession) BeaconCommRoot() ([32]byte, error) {
	return _IncognitoProxy.Contract.BeaconCommRoot(&_IncognitoProxy.CallOpts)
}

// BeaconCommRoot is a free data retrieval call binding the contract method 0xc4ed3f08.
//
// Solidity: function beaconCommRoot() constant returns(bytes32 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) BeaconCommRoot() ([32]byte, error) {
	return _IncognitoProxy.Contract.BeaconCommRoot(&_IncognitoProxy.CallOpts)
}

// BridgeCommRoot is a free data retrieval call binding the contract method 0x0f7b9ca1.
//
// Solidity: function bridgeCommRoot() constant returns(bytes32 out)
func (_IncognitoProxy *IncognitoProxyCaller) BridgeCommRoot(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "bridgeCommRoot")
	return *ret0, err
}

// BridgeCommRoot is a free data retrieval call binding the contract method 0x0f7b9ca1.
//
// Solidity: function bridgeCommRoot() constant returns(bytes32 out)
func (_IncognitoProxy *IncognitoProxySession) BridgeCommRoot() ([32]byte, error) {
	return _IncognitoProxy.Contract.BridgeCommRoot(&_IncognitoProxy.CallOpts)
}

// BridgeCommRoot is a free data retrieval call binding the contract method 0x0f7b9ca1.
//
// Solidity: function bridgeCommRoot() constant returns(bytes32 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) BridgeCommRoot() ([32]byte, error) {
	return _IncognitoProxy.Contract.BridgeCommRoot(&_IncognitoProxy.CallOpts)
}

// InMerkleTree is a free data retrieval call binding the contract method 0x97ca1262.
//
// Solidity: function inMerkleTree(bytes32 leaf, bytes32 root, bytes32[4] path, bool[4] left, int128 length) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxyCaller) InMerkleTree(opts *bind.CallOpts, leaf [32]byte, root [32]byte, path [4][32]byte, left [4]bool, length *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "inMerkleTree", leaf, root, path, left, length)
	return *ret0, err
}

// InMerkleTree is a free data retrieval call binding the contract method 0x97ca1262.
//
// Solidity: function inMerkleTree(bytes32 leaf, bytes32 root, bytes32[4] path, bool[4] left, int128 length) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxySession) InMerkleTree(leaf [32]byte, root [32]byte, path [4][32]byte, left [4]bool, length *big.Int) (bool, error) {
	return _IncognitoProxy.Contract.InMerkleTree(&_IncognitoProxy.CallOpts, leaf, root, path, left, length)
}

// InMerkleTree is a free data retrieval call binding the contract method 0x97ca1262.
//
// Solidity: function inMerkleTree(bytes32 leaf, bytes32 root, bytes32[4] path, bool[4] left, int128 length) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxyCallerSession) InMerkleTree(leaf [32]byte, root [32]byte, path [4][32]byte, left [4]bool, length *big.Int) (bool, error) {
	return _IncognitoProxy.Contract.InMerkleTree(&_IncognitoProxy.CallOpts, leaf, root, path, left, length)
}

// ParseSwapInst is a free data retrieval call binding the contract method 0xa4164866.
//
// Solidity: function parseSwapInst(bytes inst) constant returns(uint256 out, bytes32 out)
func (_IncognitoProxy *IncognitoProxyCaller) ParseSwapInst(opts *bind.CallOpts, inst []byte) (*big.Int, [32]byte, error) {
	var (
		ret0 = new(*big.Int)
		ret1 = new([32]byte)
	)
	out := &[]interface{}{
		ret0,
		ret1,
	}
	err := _IncognitoProxy.contract.Call(opts, out, "parseSwapInst", inst)
	return *ret0, *ret1, err
}

// ParseSwapInst is a free data retrieval call binding the contract method 0xa4164866.
//
// Solidity: function parseSwapInst(bytes inst) constant returns(uint256 out, bytes32 out)
func (_IncognitoProxy *IncognitoProxySession) ParseSwapInst(inst []byte) (*big.Int, [32]byte, error) {
	return _IncognitoProxy.Contract.ParseSwapInst(&_IncognitoProxy.CallOpts, inst)
}

// ParseSwapInst is a free data retrieval call binding the contract method 0xa4164866.
//
// Solidity: function parseSwapInst(bytes inst) constant returns(uint256 out, bytes32 out)
func (_IncognitoProxy *IncognitoProxyCallerSession) ParseSwapInst(inst []byte) (*big.Int, [32]byte, error) {
	return _IncognitoProxy.Contract.ParseSwapInst(&_IncognitoProxy.CallOpts, inst)
}

// VerifyInst is a free data retrieval call binding the contract method 0x1936ac71.
//
// Solidity: function verifyInst(bytes32 commRoot, bytes32 instHash, bytes32[4] instPath, bool[4] instPathIsLeft, int128 instPathLen, bytes32 instRoot, bytes32 blkHash, bytes signerPubkeys, int128 signerCount, bytes32 signerSig, bytes32[64] signerPaths, bool[64] signerPathIsLeft, int128 signerPathLen) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxyCaller) VerifyInst(opts *bind.CallOpts, commRoot [32]byte, instHash [32]byte, instPath [4][32]byte, instPathIsLeft [4]bool, instPathLen *big.Int, instRoot [32]byte, blkHash [32]byte, signerPubkeys []byte, signerCount *big.Int, signerSig [32]byte, signerPaths [64][32]byte, signerPathIsLeft [64]bool, signerPathLen *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _IncognitoProxy.contract.Call(opts, out, "verifyInst", commRoot, instHash, instPath, instPathIsLeft, instPathLen, instRoot, blkHash, signerPubkeys, signerCount, signerSig, signerPaths, signerPathIsLeft, signerPathLen)
	return *ret0, err
}

// VerifyInst is a free data retrieval call binding the contract method 0x1936ac71.
//
// Solidity: function verifyInst(bytes32 commRoot, bytes32 instHash, bytes32[4] instPath, bool[4] instPathIsLeft, int128 instPathLen, bytes32 instRoot, bytes32 blkHash, bytes signerPubkeys, int128 signerCount, bytes32 signerSig, bytes32[64] signerPaths, bool[64] signerPathIsLeft, int128 signerPathLen) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxySession) VerifyInst(commRoot [32]byte, instHash [32]byte, instPath [4][32]byte, instPathIsLeft [4]bool, instPathLen *big.Int, instRoot [32]byte, blkHash [32]byte, signerPubkeys []byte, signerCount *big.Int, signerSig [32]byte, signerPaths [64][32]byte, signerPathIsLeft [64]bool, signerPathLen *big.Int) (bool, error) {
	return _IncognitoProxy.Contract.VerifyInst(&_IncognitoProxy.CallOpts, commRoot, instHash, instPath, instPathIsLeft, instPathLen, instRoot, blkHash, signerPubkeys, signerCount, signerSig, signerPaths, signerPathIsLeft, signerPathLen)
}

// VerifyInst is a free data retrieval call binding the contract method 0x1936ac71.
//
// Solidity: function verifyInst(bytes32 commRoot, bytes32 instHash, bytes32[4] instPath, bool[4] instPathIsLeft, int128 instPathLen, bytes32 instRoot, bytes32 blkHash, bytes signerPubkeys, int128 signerCount, bytes32 signerSig, bytes32[64] signerPaths, bool[64] signerPathIsLeft, int128 signerPathLen) constant returns(bool out)
func (_IncognitoProxy *IncognitoProxyCallerSession) VerifyInst(commRoot [32]byte, instHash [32]byte, instPath [4][32]byte, instPathIsLeft [4]bool, instPathLen *big.Int, instRoot [32]byte, blkHash [32]byte, signerPubkeys []byte, signerCount *big.Int, signerSig [32]byte, signerPaths [64][32]byte, signerPathIsLeft [64]bool, signerPathLen *big.Int) (bool, error) {
	return _IncognitoProxy.Contract.VerifyInst(&_IncognitoProxy.CallOpts, commRoot, instHash, instPath, instPathIsLeft, instPathLen, instRoot, blkHash, signerPubkeys, signerCount, signerSig, signerPaths, signerPathIsLeft, signerPathLen)
}

// InstructionApproved is a paid mutator transaction binding the contract method 0x54b578c0.
//
// Solidity: function instructionApproved(bytes32 instHash, bytes32[4] beaconInstPath, bool[4] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, bytes32 beaconBlkHash, bytes beaconSignerPubkeys, int128 beaconSignerCount, bytes32 beaconSignerSig, bytes32[64] beaconSignerPaths, bool[64] beaconSignerPathIsLeft, int128 beaconSignerPathLen, bytes32[4] bridgeInstPath, bool[4] bridgeInstPathIsLeft, int128 bridgeInstPathLen, bytes32 bridgeInstRoot, bytes32 bridgeBlkData, bytes32 bridgeBlkHash, bytes bridgeSignerPubkeys, int128 bridgeSignerCount, bytes32 bridgeSignerSig, bytes32[64] bridgeSignerPaths, bool[64] bridgeSignerPathIsLeft, int128 bridgeSignerPathLen) returns(bool out)
func (_IncognitoProxy *IncognitoProxyTransactor) InstructionApproved(opts *bind.TransactOpts, instHash [32]byte, beaconInstPath [4][32]byte, beaconInstPathIsLeft [4]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconBlkHash [32]byte, beaconSignerPubkeys []byte, beaconSignerCount *big.Int, beaconSignerSig [32]byte, beaconSignerPaths [64][32]byte, beaconSignerPathIsLeft [64]bool, beaconSignerPathLen *big.Int, bridgeInstPath [4][32]byte, bridgeInstPathIsLeft [4]bool, bridgeInstPathLen *big.Int, bridgeInstRoot [32]byte, bridgeBlkData [32]byte, bridgeBlkHash [32]byte, bridgeSignerPubkeys []byte, bridgeSignerCount *big.Int, bridgeSignerSig [32]byte, bridgeSignerPaths [64][32]byte, bridgeSignerPathIsLeft [64]bool, bridgeSignerPathLen *big.Int) (*types.Transaction, error) {
	return _IncognitoProxy.contract.Transact(opts, "instructionApproved", instHash, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconBlkHash, beaconSignerPubkeys, beaconSignerCount, beaconSignerSig, beaconSignerPaths, beaconSignerPathIsLeft, beaconSignerPathLen, bridgeInstPath, bridgeInstPathIsLeft, bridgeInstPathLen, bridgeInstRoot, bridgeBlkData, bridgeBlkHash, bridgeSignerPubkeys, bridgeSignerCount, bridgeSignerSig, bridgeSignerPaths, bridgeSignerPathIsLeft, bridgeSignerPathLen)
}

// InstructionApproved is a paid mutator transaction binding the contract method 0x54b578c0.
//
// Solidity: function instructionApproved(bytes32 instHash, bytes32[4] beaconInstPath, bool[4] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, bytes32 beaconBlkHash, bytes beaconSignerPubkeys, int128 beaconSignerCount, bytes32 beaconSignerSig, bytes32[64] beaconSignerPaths, bool[64] beaconSignerPathIsLeft, int128 beaconSignerPathLen, bytes32[4] bridgeInstPath, bool[4] bridgeInstPathIsLeft, int128 bridgeInstPathLen, bytes32 bridgeInstRoot, bytes32 bridgeBlkData, bytes32 bridgeBlkHash, bytes bridgeSignerPubkeys, int128 bridgeSignerCount, bytes32 bridgeSignerSig, bytes32[64] bridgeSignerPaths, bool[64] bridgeSignerPathIsLeft, int128 bridgeSignerPathLen) returns(bool out)
func (_IncognitoProxy *IncognitoProxySession) InstructionApproved(instHash [32]byte, beaconInstPath [4][32]byte, beaconInstPathIsLeft [4]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconBlkHash [32]byte, beaconSignerPubkeys []byte, beaconSignerCount *big.Int, beaconSignerSig [32]byte, beaconSignerPaths [64][32]byte, beaconSignerPathIsLeft [64]bool, beaconSignerPathLen *big.Int, bridgeInstPath [4][32]byte, bridgeInstPathIsLeft [4]bool, bridgeInstPathLen *big.Int, bridgeInstRoot [32]byte, bridgeBlkData [32]byte, bridgeBlkHash [32]byte, bridgeSignerPubkeys []byte, bridgeSignerCount *big.Int, bridgeSignerSig [32]byte, bridgeSignerPaths [64][32]byte, bridgeSignerPathIsLeft [64]bool, bridgeSignerPathLen *big.Int) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.InstructionApproved(&_IncognitoProxy.TransactOpts, instHash, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconBlkHash, beaconSignerPubkeys, beaconSignerCount, beaconSignerSig, beaconSignerPaths, beaconSignerPathIsLeft, beaconSignerPathLen, bridgeInstPath, bridgeInstPathIsLeft, bridgeInstPathLen, bridgeInstRoot, bridgeBlkData, bridgeBlkHash, bridgeSignerPubkeys, bridgeSignerCount, bridgeSignerSig, bridgeSignerPaths, bridgeSignerPathIsLeft, bridgeSignerPathLen)
}

// InstructionApproved is a paid mutator transaction binding the contract method 0x54b578c0.
//
// Solidity: function instructionApproved(bytes32 instHash, bytes32[4] beaconInstPath, bool[4] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, bytes32 beaconBlkHash, bytes beaconSignerPubkeys, int128 beaconSignerCount, bytes32 beaconSignerSig, bytes32[64] beaconSignerPaths, bool[64] beaconSignerPathIsLeft, int128 beaconSignerPathLen, bytes32[4] bridgeInstPath, bool[4] bridgeInstPathIsLeft, int128 bridgeInstPathLen, bytes32 bridgeInstRoot, bytes32 bridgeBlkData, bytes32 bridgeBlkHash, bytes bridgeSignerPubkeys, int128 bridgeSignerCount, bytes32 bridgeSignerSig, bytes32[64] bridgeSignerPaths, bool[64] bridgeSignerPathIsLeft, int128 bridgeSignerPathLen) returns(bool out)
func (_IncognitoProxy *IncognitoProxyTransactorSession) InstructionApproved(instHash [32]byte, beaconInstPath [4][32]byte, beaconInstPathIsLeft [4]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconBlkHash [32]byte, beaconSignerPubkeys []byte, beaconSignerCount *big.Int, beaconSignerSig [32]byte, beaconSignerPaths [64][32]byte, beaconSignerPathIsLeft [64]bool, beaconSignerPathLen *big.Int, bridgeInstPath [4][32]byte, bridgeInstPathIsLeft [4]bool, bridgeInstPathLen *big.Int, bridgeInstRoot [32]byte, bridgeBlkData [32]byte, bridgeBlkHash [32]byte, bridgeSignerPubkeys []byte, bridgeSignerCount *big.Int, bridgeSignerSig [32]byte, bridgeSignerPaths [64][32]byte, bridgeSignerPathIsLeft [64]bool, bridgeSignerPathLen *big.Int) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.InstructionApproved(&_IncognitoProxy.TransactOpts, instHash, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconBlkHash, beaconSignerPubkeys, beaconSignerCount, beaconSignerSig, beaconSignerPaths, beaconSignerPathIsLeft, beaconSignerPathLen, bridgeInstPath, bridgeInstPathIsLeft, bridgeInstPathLen, bridgeInstRoot, bridgeBlkData, bridgeBlkHash, bridgeSignerPubkeys, bridgeSignerCount, bridgeSignerSig, bridgeSignerPaths, bridgeSignerPathIsLeft, bridgeSignerPathLen)
}

// NotifyPls is a paid mutator transaction binding the contract method 0x08aadb64.
//
// Solidity: function notifyPls(bytes32 v) returns()
func (_IncognitoProxy *IncognitoProxyTransactor) NotifyPls(opts *bind.TransactOpts, v [32]byte) (*types.Transaction, error) {
	return _IncognitoProxy.contract.Transact(opts, "notifyPls", v)
}

// NotifyPls is a paid mutator transaction binding the contract method 0x08aadb64.
//
// Solidity: function notifyPls(bytes32 v) returns()
func (_IncognitoProxy *IncognitoProxySession) NotifyPls(v [32]byte) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.NotifyPls(&_IncognitoProxy.TransactOpts, v)
}

// NotifyPls is a paid mutator transaction binding the contract method 0x08aadb64.
//
// Solidity: function notifyPls(bytes32 v) returns()
func (_IncognitoProxy *IncognitoProxyTransactorSession) NotifyPls(v [32]byte) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.NotifyPls(&_IncognitoProxy.TransactOpts, v)
}

// SwapCommittee is a paid mutator transaction binding the contract method 0x70a956fb.
//
// Solidity: function swapCommittee(bytes inst, bytes32[4] beaconInstPath, bool[4] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, bytes32 beaconBlkHash, bytes beaconSignerPubkeys, int128 beaconSignerCount, bytes32 beaconSignerSig, bytes32[64] beaconSignerPaths, bool[64] beaconSignerPathIsLeft, int128 beaconSignerPathLen, bytes32[4] bridgeInstPath, bool[4] bridgeInstPathIsLeft, int128 bridgeInstPathLen, bytes32 bridgeInstRoot, bytes32 bridgeBlkData, bytes32 bridgeBlkHash, bytes bridgeSignerPubkeys, int128 bridgeSignerCount, bytes32 bridgeSignerSig, bytes32[64] bridgeSignerPaths, bool[64] bridgeSignerPathIsLeft, int128 bridgeSignerPathLen) returns(bool out)
func (_IncognitoProxy *IncognitoProxyTransactor) SwapCommittee(opts *bind.TransactOpts, inst []byte, beaconInstPath [4][32]byte, beaconInstPathIsLeft [4]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconBlkHash [32]byte, beaconSignerPubkeys []byte, beaconSignerCount *big.Int, beaconSignerSig [32]byte, beaconSignerPaths [64][32]byte, beaconSignerPathIsLeft [64]bool, beaconSignerPathLen *big.Int, bridgeInstPath [4][32]byte, bridgeInstPathIsLeft [4]bool, bridgeInstPathLen *big.Int, bridgeInstRoot [32]byte, bridgeBlkData [32]byte, bridgeBlkHash [32]byte, bridgeSignerPubkeys []byte, bridgeSignerCount *big.Int, bridgeSignerSig [32]byte, bridgeSignerPaths [64][32]byte, bridgeSignerPathIsLeft [64]bool, bridgeSignerPathLen *big.Int) (*types.Transaction, error) {
	return _IncognitoProxy.contract.Transact(opts, "swapCommittee", inst, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconBlkHash, beaconSignerPubkeys, beaconSignerCount, beaconSignerSig, beaconSignerPaths, beaconSignerPathIsLeft, beaconSignerPathLen, bridgeInstPath, bridgeInstPathIsLeft, bridgeInstPathLen, bridgeInstRoot, bridgeBlkData, bridgeBlkHash, bridgeSignerPubkeys, bridgeSignerCount, bridgeSignerSig, bridgeSignerPaths, bridgeSignerPathIsLeft, bridgeSignerPathLen)
}

// SwapCommittee is a paid mutator transaction binding the contract method 0x70a956fb.
//
// Solidity: function swapCommittee(bytes inst, bytes32[4] beaconInstPath, bool[4] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, bytes32 beaconBlkHash, bytes beaconSignerPubkeys, int128 beaconSignerCount, bytes32 beaconSignerSig, bytes32[64] beaconSignerPaths, bool[64] beaconSignerPathIsLeft, int128 beaconSignerPathLen, bytes32[4] bridgeInstPath, bool[4] bridgeInstPathIsLeft, int128 bridgeInstPathLen, bytes32 bridgeInstRoot, bytes32 bridgeBlkData, bytes32 bridgeBlkHash, bytes bridgeSignerPubkeys, int128 bridgeSignerCount, bytes32 bridgeSignerSig, bytes32[64] bridgeSignerPaths, bool[64] bridgeSignerPathIsLeft, int128 bridgeSignerPathLen) returns(bool out)
func (_IncognitoProxy *IncognitoProxySession) SwapCommittee(inst []byte, beaconInstPath [4][32]byte, beaconInstPathIsLeft [4]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconBlkHash [32]byte, beaconSignerPubkeys []byte, beaconSignerCount *big.Int, beaconSignerSig [32]byte, beaconSignerPaths [64][32]byte, beaconSignerPathIsLeft [64]bool, beaconSignerPathLen *big.Int, bridgeInstPath [4][32]byte, bridgeInstPathIsLeft [4]bool, bridgeInstPathLen *big.Int, bridgeInstRoot [32]byte, bridgeBlkData [32]byte, bridgeBlkHash [32]byte, bridgeSignerPubkeys []byte, bridgeSignerCount *big.Int, bridgeSignerSig [32]byte, bridgeSignerPaths [64][32]byte, bridgeSignerPathIsLeft [64]bool, bridgeSignerPathLen *big.Int) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.SwapCommittee(&_IncognitoProxy.TransactOpts, inst, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconBlkHash, beaconSignerPubkeys, beaconSignerCount, beaconSignerSig, beaconSignerPaths, beaconSignerPathIsLeft, beaconSignerPathLen, bridgeInstPath, bridgeInstPathIsLeft, bridgeInstPathLen, bridgeInstRoot, bridgeBlkData, bridgeBlkHash, bridgeSignerPubkeys, bridgeSignerCount, bridgeSignerSig, bridgeSignerPaths, bridgeSignerPathIsLeft, bridgeSignerPathLen)
}

// SwapCommittee is a paid mutator transaction binding the contract method 0x70a956fb.
//
// Solidity: function swapCommittee(bytes inst, bytes32[4] beaconInstPath, bool[4] beaconInstPathIsLeft, int128 beaconInstPathLen, bytes32 beaconInstRoot, bytes32 beaconBlkData, bytes32 beaconBlkHash, bytes beaconSignerPubkeys, int128 beaconSignerCount, bytes32 beaconSignerSig, bytes32[64] beaconSignerPaths, bool[64] beaconSignerPathIsLeft, int128 beaconSignerPathLen, bytes32[4] bridgeInstPath, bool[4] bridgeInstPathIsLeft, int128 bridgeInstPathLen, bytes32 bridgeInstRoot, bytes32 bridgeBlkData, bytes32 bridgeBlkHash, bytes bridgeSignerPubkeys, int128 bridgeSignerCount, bytes32 bridgeSignerSig, bytes32[64] bridgeSignerPaths, bool[64] bridgeSignerPathIsLeft, int128 bridgeSignerPathLen) returns(bool out)
func (_IncognitoProxy *IncognitoProxyTransactorSession) SwapCommittee(inst []byte, beaconInstPath [4][32]byte, beaconInstPathIsLeft [4]bool, beaconInstPathLen *big.Int, beaconInstRoot [32]byte, beaconBlkData [32]byte, beaconBlkHash [32]byte, beaconSignerPubkeys []byte, beaconSignerCount *big.Int, beaconSignerSig [32]byte, beaconSignerPaths [64][32]byte, beaconSignerPathIsLeft [64]bool, beaconSignerPathLen *big.Int, bridgeInstPath [4][32]byte, bridgeInstPathIsLeft [4]bool, bridgeInstPathLen *big.Int, bridgeInstRoot [32]byte, bridgeBlkData [32]byte, bridgeBlkHash [32]byte, bridgeSignerPubkeys []byte, bridgeSignerCount *big.Int, bridgeSignerSig [32]byte, bridgeSignerPaths [64][32]byte, bridgeSignerPathIsLeft [64]bool, bridgeSignerPathLen *big.Int) (*types.Transaction, error) {
	return _IncognitoProxy.Contract.SwapCommittee(&_IncognitoProxy.TransactOpts, inst, beaconInstPath, beaconInstPathIsLeft, beaconInstPathLen, beaconInstRoot, beaconBlkData, beaconBlkHash, beaconSignerPubkeys, beaconSignerCount, beaconSignerSig, beaconSignerPaths, beaconSignerPathIsLeft, beaconSignerPathLen, bridgeInstPath, bridgeInstPathIsLeft, bridgeInstPathLen, bridgeInstRoot, bridgeBlkData, bridgeBlkHash, bridgeSignerPubkeys, bridgeSignerCount, bridgeSignerSig, bridgeSignerPaths, bridgeSignerPathIsLeft, bridgeSignerPathLen)
}

// IncognitoProxyNotifyBoolIterator is returned from FilterNotifyBool and is used to iterate over the raw logs and unpacked data for NotifyBool events raised by the IncognitoProxy contract.
type IncognitoProxyNotifyBoolIterator struct {
	Event *IncognitoProxyNotifyBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxyNotifyBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxyNotifyBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxyNotifyBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxyNotifyBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxyNotifyBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxyNotifyBool represents a NotifyBool event raised by the IncognitoProxy contract.
type IncognitoProxyNotifyBool struct {
	Content bool
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNotifyBool is a free log retrieval operation binding the contract event 0x6c8f06ff564112a969115be5f33d4a0f87ba918c9c9bc3090fe631968e818be4.
//
// Solidity: event NotifyBool(bool content)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterNotifyBool(opts *bind.FilterOpts) (*IncognitoProxyNotifyBoolIterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "NotifyBool")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyNotifyBoolIterator{contract: _IncognitoProxy.contract, event: "NotifyBool", logs: logs, sub: sub}, nil
}

// WatchNotifyBool is a free log subscription operation binding the contract event 0x6c8f06ff564112a969115be5f33d4a0f87ba918c9c9bc3090fe631968e818be4.
//
// Solidity: event NotifyBool(bool content)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchNotifyBool(opts *bind.WatchOpts, sink chan<- *IncognitoProxyNotifyBool) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "NotifyBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxyNotifyBool)
				if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncognitoProxyNotifyBytes32Iterator is returned from FilterNotifyBytes32 and is used to iterate over the raw logs and unpacked data for NotifyBytes32 events raised by the IncognitoProxy contract.
type IncognitoProxyNotifyBytes32Iterator struct {
	Event *IncognitoProxyNotifyBytes32 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxyNotifyBytes32Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxyNotifyBytes32)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxyNotifyBytes32)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxyNotifyBytes32Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxyNotifyBytes32Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxyNotifyBytes32 represents a NotifyBytes32 event raised by the IncognitoProxy contract.
type IncognitoProxyNotifyBytes32 struct {
	Content [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNotifyBytes32 is a free log retrieval operation binding the contract event 0xb42152598f9b870207037767fd41b627a327c9434c796b2ee501d68acec68d1b.
//
// Solidity: event NotifyBytes32(bytes32 content)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterNotifyBytes32(opts *bind.FilterOpts) (*IncognitoProxyNotifyBytes32Iterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "NotifyBytes32")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyNotifyBytes32Iterator{contract: _IncognitoProxy.contract, event: "NotifyBytes32", logs: logs, sub: sub}, nil
}

// WatchNotifyBytes32 is a free log subscription operation binding the contract event 0xb42152598f9b870207037767fd41b627a327c9434c796b2ee501d68acec68d1b.
//
// Solidity: event NotifyBytes32(bytes32 content)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchNotifyBytes32(opts *bind.WatchOpts, sink chan<- *IncognitoProxyNotifyBytes32) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "NotifyBytes32")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxyNotifyBytes32)
				if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyBytes32", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncognitoProxyNotifyStringIterator is returned from FilterNotifyString and is used to iterate over the raw logs and unpacked data for NotifyString events raised by the IncognitoProxy contract.
type IncognitoProxyNotifyStringIterator struct {
	Event *IncognitoProxyNotifyString // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxyNotifyStringIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxyNotifyString)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxyNotifyString)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxyNotifyStringIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxyNotifyStringIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxyNotifyString represents a NotifyString event raised by the IncognitoProxy contract.
type IncognitoProxyNotifyString struct {
	Content string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNotifyString is a free log retrieval operation binding the contract event 0x8b1126c8e4087477c3efd9e3785935b29c778491c70e249de774345f7ca9b7f9.
//
// Solidity: event NotifyString(string content)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterNotifyString(opts *bind.FilterOpts) (*IncognitoProxyNotifyStringIterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "NotifyString")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyNotifyStringIterator{contract: _IncognitoProxy.contract, event: "NotifyString", logs: logs, sub: sub}, nil
}

// WatchNotifyString is a free log subscription operation binding the contract event 0x8b1126c8e4087477c3efd9e3785935b29c778491c70e249de774345f7ca9b7f9.
//
// Solidity: event NotifyString(string content)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchNotifyString(opts *bind.WatchOpts, sink chan<- *IncognitoProxyNotifyString) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "NotifyString")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxyNotifyString)
				if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyString", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncognitoProxyNotifyUint256Iterator is returned from FilterNotifyUint256 and is used to iterate over the raw logs and unpacked data for NotifyUint256 events raised by the IncognitoProxy contract.
type IncognitoProxyNotifyUint256Iterator struct {
	Event *IncognitoProxyNotifyUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxyNotifyUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxyNotifyUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxyNotifyUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxyNotifyUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxyNotifyUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxyNotifyUint256 represents a NotifyUint256 event raised by the IncognitoProxy contract.
type IncognitoProxyNotifyUint256 struct {
	Content *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNotifyUint256 is a free log retrieval operation binding the contract event 0x8e2fc7b10a4f77a18c553db9a8f8c24d9e379da2557cb61ad4cc513a2f992cbd.
//
// Solidity: event NotifyUint256(uint256 content)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterNotifyUint256(opts *bind.FilterOpts) (*IncognitoProxyNotifyUint256Iterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "NotifyUint256")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxyNotifyUint256Iterator{contract: _IncognitoProxy.contract, event: "NotifyUint256", logs: logs, sub: sub}, nil
}

// WatchNotifyUint256 is a free log subscription operation binding the contract event 0x8e2fc7b10a4f77a18c553db9a8f8c24d9e379da2557cb61ad4cc513a2f992cbd.
//
// Solidity: event NotifyUint256(uint256 content)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchNotifyUint256(opts *bind.WatchOpts, sink chan<- *IncognitoProxyNotifyUint256) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "NotifyUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxyNotifyUint256)
				if err := _IncognitoProxy.contract.UnpackLog(event, "NotifyUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncognitoProxySwapBeaconCommitteeIterator is returned from FilterSwapBeaconCommittee and is used to iterate over the raw logs and unpacked data for SwapBeaconCommittee events raised by the IncognitoProxy contract.
type IncognitoProxySwapBeaconCommitteeIterator struct {
	Event *IncognitoProxySwapBeaconCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxySwapBeaconCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxySwapBeaconCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxySwapBeaconCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxySwapBeaconCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxySwapBeaconCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxySwapBeaconCommittee represents a SwapBeaconCommittee event raised by the IncognitoProxy contract.
type IncognitoProxySwapBeaconCommittee struct {
	NewCommitteeRoot [32]byte
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSwapBeaconCommittee is a free log retrieval operation binding the contract event 0x9bc790c6fde431677d019a28e2223821b0c65a455b1ec636aa965504ea702779.
//
// Solidity: event SwapBeaconCommittee(bytes32 newCommitteeRoot)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterSwapBeaconCommittee(opts *bind.FilterOpts) (*IncognitoProxySwapBeaconCommitteeIterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "SwapBeaconCommittee")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxySwapBeaconCommitteeIterator{contract: _IncognitoProxy.contract, event: "SwapBeaconCommittee", logs: logs, sub: sub}, nil
}

// WatchSwapBeaconCommittee is a free log subscription operation binding the contract event 0x9bc790c6fde431677d019a28e2223821b0c65a455b1ec636aa965504ea702779.
//
// Solidity: event SwapBeaconCommittee(bytes32 newCommitteeRoot)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchSwapBeaconCommittee(opts *bind.WatchOpts, sink chan<- *IncognitoProxySwapBeaconCommittee) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "SwapBeaconCommittee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxySwapBeaconCommittee)
				if err := _IncognitoProxy.contract.UnpackLog(event, "SwapBeaconCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncognitoProxySwapBridgeCommitteeIterator is returned from FilterSwapBridgeCommittee and is used to iterate over the raw logs and unpacked data for SwapBridgeCommittee events raised by the IncognitoProxy contract.
type IncognitoProxySwapBridgeCommitteeIterator struct {
	Event *IncognitoProxySwapBridgeCommittee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncognitoProxySwapBridgeCommitteeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncognitoProxySwapBridgeCommittee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncognitoProxySwapBridgeCommittee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncognitoProxySwapBridgeCommitteeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncognitoProxySwapBridgeCommitteeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncognitoProxySwapBridgeCommittee represents a SwapBridgeCommittee event raised by the IncognitoProxy contract.
type IncognitoProxySwapBridgeCommittee struct {
	NewCommitteeRoot [32]byte
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterSwapBridgeCommittee is a free log retrieval operation binding the contract event 0x5e38c3577fbd30123a6e5ddc0d8bb0271335fe41d8f44ef655290058510394c1.
//
// Solidity: event SwapBridgeCommittee(bytes32 newCommitteeRoot)
func (_IncognitoProxy *IncognitoProxyFilterer) FilterSwapBridgeCommittee(opts *bind.FilterOpts) (*IncognitoProxySwapBridgeCommitteeIterator, error) {

	logs, sub, err := _IncognitoProxy.contract.FilterLogs(opts, "SwapBridgeCommittee")
	if err != nil {
		return nil, err
	}
	return &IncognitoProxySwapBridgeCommitteeIterator{contract: _IncognitoProxy.contract, event: "SwapBridgeCommittee", logs: logs, sub: sub}, nil
}

// WatchSwapBridgeCommittee is a free log subscription operation binding the contract event 0x5e38c3577fbd30123a6e5ddc0d8bb0271335fe41d8f44ef655290058510394c1.
//
// Solidity: event SwapBridgeCommittee(bytes32 newCommitteeRoot)
func (_IncognitoProxy *IncognitoProxyFilterer) WatchSwapBridgeCommittee(opts *bind.WatchOpts, sink chan<- *IncognitoProxySwapBridgeCommittee) (event.Subscription, error) {

	logs, sub, err := _IncognitoProxy.contract.WatchLogs(opts, "SwapBridgeCommittee")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncognitoProxySwapBridgeCommittee)
				if err := _IncognitoProxy.contract.UnpackLog(event, "SwapBridgeCommittee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
