// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zksnark.proto

#include "zksnark.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_zksnark_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zksnark_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MerkleHash;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zksnark_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Note;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zksnark_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PHGRProof;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zksnark_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MerklePath;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_zksnark_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_JSInput;
}  // namespace protobuf_zksnark_2eproto
namespace zksnark {
class MerkleHashDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MerkleHash>
      _instance;
} _MerkleHash_default_instance_;
class MerklePathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MerklePath>
      _instance;
} _MerklePath_default_instance_;
class NoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Note>
      _instance;
} _Note_default_instance_;
class JSInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JSInput>
      _instance;
} _JSInput_default_instance_;
class ProveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProveRequest>
      _instance;
} _ProveRequest_default_instance_;
class PHGRProofDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PHGRProof>
      _instance;
} _PHGRProof_default_instance_;
class ProveReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProveReply>
      _instance;
} _ProveReply_default_instance_;
class VerifyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VerifyRequest>
      _instance;
} _VerifyRequest_default_instance_;
class VerifyReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VerifyReply>
      _instance;
} _VerifyReply_default_instance_;
}  // namespace zksnark
namespace protobuf_zksnark_2eproto {
static void InitDefaultsMerkleHash() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zksnark::_MerkleHash_default_instance_;
    new (ptr) ::zksnark::MerkleHash();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::MerkleHash::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MerkleHash =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMerkleHash}, {}};

static void InitDefaultsMerklePath() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zksnark::_MerklePath_default_instance_;
    new (ptr) ::zksnark::MerklePath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::MerklePath::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MerklePath =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMerklePath}, {
      &protobuf_zksnark_2eproto::scc_info_MerkleHash.base,}};

static void InitDefaultsNote() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zksnark::_Note_default_instance_;
    new (ptr) ::zksnark::Note();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::Note::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Note =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNote}, {}};

static void InitDefaultsJSInput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zksnark::_JSInput_default_instance_;
    new (ptr) ::zksnark::JSInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::JSInput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_JSInput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsJSInput}, {
      &protobuf_zksnark_2eproto::scc_info_MerklePath.base,
      &protobuf_zksnark_2eproto::scc_info_Note.base,}};

static void InitDefaultsProveRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zksnark::_ProveRequest_default_instance_;
    new (ptr) ::zksnark::ProveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::ProveRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ProveRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProveRequest}, {
      &protobuf_zksnark_2eproto::scc_info_JSInput.base,
      &protobuf_zksnark_2eproto::scc_info_Note.base,}};

static void InitDefaultsPHGRProof() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zksnark::_PHGRProof_default_instance_;
    new (ptr) ::zksnark::PHGRProof();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::PHGRProof::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PHGRProof =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPHGRProof}, {}};

static void InitDefaultsProveReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zksnark::_ProveReply_default_instance_;
    new (ptr) ::zksnark::ProveReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::ProveReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProveReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProveReply}, {
      &protobuf_zksnark_2eproto::scc_info_PHGRProof.base,}};

static void InitDefaultsVerifyRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zksnark::_VerifyRequest_default_instance_;
    new (ptr) ::zksnark::VerifyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::VerifyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VerifyRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVerifyRequest}, {
      &protobuf_zksnark_2eproto::scc_info_PHGRProof.base,}};

static void InitDefaultsVerifyReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zksnark::_VerifyReply_default_instance_;
    new (ptr) ::zksnark::VerifyReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::VerifyReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VerifyReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVerifyReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MerkleHash.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MerklePath.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Note.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JSInput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProveRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PHGRProof.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProveReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VerifyRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VerifyReply.base);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::MerkleHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::MerkleHash, hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::MerklePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::MerklePath, authpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::MerklePath, index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, cm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, rho_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, apk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, nf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::JSInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::JSInput, witnesspath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::JSInput, spendingkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::JSInput, note_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, outnotes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, hsig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, phi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, rts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, fee_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::PHGRProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::PHGRProof, g_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::PHGRProof, g_a_prime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::PHGRProof, g_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::PHGRProof, g_b_prime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::PHGRProof, g_c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::PHGRProof, g_c_prime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::PHGRProof, g_k_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::PHGRProof, g_h_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveReply, proof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyRequest, proof_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyRequest, hsig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyRequest, rts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyRequest, nullifiers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyRequest, commits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyRequest, macs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyRequest, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyRequest, fee_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::VerifyReply, valid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zksnark::MerkleHash)},
  { 6, -1, sizeof(::zksnark::MerklePath)},
  { 13, -1, sizeof(::zksnark::Note)},
  { 24, -1, sizeof(::zksnark::JSInput)},
  { 32, -1, sizeof(::zksnark::ProveRequest)},
  { 44, -1, sizeof(::zksnark::PHGRProof)},
  { 57, -1, sizeof(::zksnark::ProveReply)},
  { 63, -1, sizeof(::zksnark::VerifyRequest)},
  { 76, -1, sizeof(::zksnark::VerifyReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_MerkleHash_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_MerklePath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_Note_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_JSInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_ProveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_PHGRProof_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_ProveReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_VerifyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_VerifyReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "zksnark.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rzksnark.proto\022\007zksnark\"\032\n\nMerkleHash\022\014"
      "\n\004hash\030\001 \001(\014\"B\n\nMerklePath\022%\n\010authPath\030\001"
      " \003(\0132\023.zksnark.MerkleHash\022\r\n\005index\030\002 \003(\010"
      "\"R\n\004Note\022\r\n\005value\030\001 \001(\004\022\n\n\002cm\030\002 \001(\014\022\t\n\001r"
      "\030\003 \001(\014\022\013\n\003rho\030\004 \001(\014\022\013\n\003apk\030\005 \001(\014\022\n\n\002nf\030\006"
      " \001(\014\"e\n\007JSInput\022(\n\013witnessPath\030\001 \001(\0132\023.z"
      "ksnark.MerklePath\022\023\n\013spendingKey\030\002 \001(\014\022\033"
      "\n\004note\030\003 \001(\0132\r.zksnark.Note\"\226\001\n\014ProveReq"
      "uest\022 \n\006inputs\030\001 \003(\0132\020.zksnark.JSInput\022\037"
      "\n\010outNotes\030\002 \003(\0132\r.zksnark.Note\022\014\n\004hsig\030"
      "\003 \001(\014\022\013\n\003phi\030\004 \001(\014\022\013\n\003rts\030\005 \003(\014\022\016\n\006rewar"
      "d\030\006 \001(\004\022\013\n\003fee\030\007 \001(\004\"\205\001\n\tPHGRProof\022\013\n\003g_"
      "A\030\001 \001(\014\022\021\n\tg_A_prime\030\002 \001(\014\022\013\n\003g_B\030\003 \001(\014\022"
      "\021\n\tg_B_prime\030\004 \001(\014\022\013\n\003g_C\030\005 \001(\014\022\021\n\tg_C_p"
      "rime\030\006 \001(\014\022\013\n\003g_K\030\007 \001(\014\022\013\n\003g_H\030\010 \001(\014\"/\n\n"
      "ProveReply\022!\n\005proof\030\001 \001(\0132\022.zksnark.PHGR"
      "Proof\"\235\001\n\rVerifyRequest\022!\n\005proof\030\001 \001(\0132\022"
      ".zksnark.PHGRProof\022\014\n\004hsig\030\002 \001(\014\022\013\n\003rts\030"
      "\003 \003(\014\022\022\n\nnullifiers\030\004 \003(\014\022\017\n\007commits\030\005 \003"
      "(\014\022\014\n\004macs\030\006 \003(\014\022\016\n\006reward\030\007 \001(\004\022\013\n\003fee\030"
      "\010 \001(\004\"\034\n\013VerifyReply\022\r\n\005valid\030\001 \001(\0102z\n\007Z"
      "ksnark\0225\n\005Prove\022\025.zksnark.ProveRequest\032\023"
      ".zksnark.ProveReply\"\000\0228\n\006Verify\022\026.zksnar"
      "k.VerifyRequest\032\024.zksnark.VerifyReply\"\000b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 967);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zksnark.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zksnark_2eproto
namespace zksnark {

// ===================================================================

void MerkleHash::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MerkleHash::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MerkleHash::MerkleHash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zksnark_2eproto::scc_info_MerkleHash.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.MerkleHash)
}
MerkleHash::MerkleHash(const MerkleHash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:zksnark.MerkleHash)
}

void MerkleHash::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MerkleHash::~MerkleHash() {
  // @@protoc_insertion_point(destructor:zksnark.MerkleHash)
  SharedDtor();
}

void MerkleHash::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MerkleHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MerkleHash::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MerkleHash& MerkleHash::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zksnark_2eproto::scc_info_MerkleHash.base);
  return *internal_default_instance();
}


void MerkleHash::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.MerkleHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MerkleHash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.MerkleHash)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.MerkleHash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.MerkleHash)
  return false;
#undef DO_
}

void MerkleHash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.MerkleHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.MerkleHash)
}

::google::protobuf::uint8* MerkleHash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.MerkleHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.MerkleHash)
  return target;
}

size_t MerkleHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.MerkleHash)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MerkleHash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.MerkleHash)
  GOOGLE_DCHECK_NE(&from, this);
  const MerkleHash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MerkleHash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.MerkleHash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.MerkleHash)
    MergeFrom(*source);
  }
}

void MerkleHash::MergeFrom(const MerkleHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.MerkleHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void MerkleHash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.MerkleHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerkleHash::CopyFrom(const MerkleHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.MerkleHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerkleHash::IsInitialized() const {
  return true;
}

void MerkleHash::Swap(MerkleHash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MerkleHash::InternalSwap(MerkleHash* other) {
  using std::swap;
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MerkleHash::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MerklePath::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MerklePath::kAuthPathFieldNumber;
const int MerklePath::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MerklePath::MerklePath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zksnark_2eproto::scc_info_MerklePath.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.MerklePath)
}
MerklePath::MerklePath(const MerklePath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      authpath_(from.authpath_),
      index_(from.index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zksnark.MerklePath)
}

void MerklePath::SharedCtor() {
}

MerklePath::~MerklePath() {
  // @@protoc_insertion_point(destructor:zksnark.MerklePath)
  SharedDtor();
}

void MerklePath::SharedDtor() {
}

void MerklePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MerklePath::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MerklePath& MerklePath::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zksnark_2eproto::scc_info_MerklePath.base);
  return *internal_default_instance();
}


void MerklePath::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.MerklePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authpath_.Clear();
  index_.Clear();
  _internal_metadata_.Clear();
}

bool MerklePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.MerklePath)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zksnark.MerkleHash authPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_authpath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18u, input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.MerklePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.MerklePath)
  return false;
#undef DO_
}

void MerklePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.MerklePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zksnark.MerkleHash authPath = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->authpath_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->authpath(static_cast<int>(i)),
      output);
  }

  // repeated bool index = 2;
  if (this->index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _index_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->index().data(), this->index_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.MerklePath)
}

::google::protobuf::uint8* MerklePath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.MerklePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zksnark.MerkleHash authPath = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->authpath_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->authpath(static_cast<int>(i)), deterministic, target);
  }

  // repeated bool index = 2;
  if (this->index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _index_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->index_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.MerklePath)
  return target;
}

size_t MerklePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.MerklePath)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .zksnark.MerkleHash authPath = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->authpath_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->authpath(static_cast<int>(i)));
    }
  }

  // repeated bool index = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->index_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MerklePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.MerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  const MerklePath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MerklePath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.MerklePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.MerklePath)
    MergeFrom(*source);
  }
}

void MerklePath::MergeFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.MerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authpath_.MergeFrom(from.authpath_);
  index_.MergeFrom(from.index_);
}

void MerklePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.MerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerklePath::CopyFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.MerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerklePath::IsInitialized() const {
  return true;
}

void MerklePath::Swap(MerklePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MerklePath::InternalSwap(MerklePath* other) {
  using std::swap;
  CastToBase(&authpath_)->InternalSwap(CastToBase(&other->authpath_));
  index_.InternalSwap(&other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MerklePath::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Note::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Note::kValueFieldNumber;
const int Note::kCmFieldNumber;
const int Note::kRFieldNumber;
const int Note::kRhoFieldNumber;
const int Note::kApkFieldNumber;
const int Note::kNfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Note::Note()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zksnark_2eproto::scc_info_Note.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.Note)
}
Note::Note(const Note& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cm().size() > 0) {
    cm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cm_);
  }
  r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.r().size() > 0) {
    r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  rho_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rho().size() > 0) {
    rho_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rho_);
  }
  apk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.apk().size() > 0) {
    apk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apk_);
  }
  nf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nf().size() > 0) {
    nf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nf_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zksnark.Note)
}

void Note::SharedCtor() {
  cm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rho_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_ULONGLONG(0);
}

Note::~Note() {
  // @@protoc_insertion_point(destructor:zksnark.Note)
  SharedDtor();
}

void Note::SharedDtor() {
  cm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rho_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Note::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Note::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Note& Note::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zksnark_2eproto::scc_info_Note.base);
  return *internal_default_instance();
}


void Note::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rho_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Note::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.Note)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes r = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes rho = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rho()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes apk = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_apk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.Note)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.Note)
  return false;
#undef DO_
}

void Note::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }

  // bytes cm = 2;
  if (this->cm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cm(), output);
  }

  // bytes r = 3;
  if (this->r().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->r(), output);
  }

  // bytes rho = 4;
  if (this->rho().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->rho(), output);
  }

  // bytes apk = 5;
  if (this->apk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->apk(), output);
  }

  // bytes nf = 6;
  if (this->nf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->nf(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.Note)
}

::google::protobuf::uint8* Note::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }

  // bytes cm = 2;
  if (this->cm().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cm(), target);
  }

  // bytes r = 3;
  if (this->r().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->r(), target);
  }

  // bytes rho = 4;
  if (this->rho().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->rho(), target);
  }

  // bytes apk = 5;
  if (this->apk().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->apk(), target);
  }

  // bytes nf = 6;
  if (this->nf().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->nf(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.Note)
  return target;
}

size_t Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.Note)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes cm = 2;
  if (this->cm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cm());
  }

  // bytes r = 3;
  if (this->r().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->r());
  }

  // bytes rho = 4;
  if (this->rho().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rho());
  }

  // bytes apk = 5;
  if (this->apk().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->apk());
  }

  // bytes nf = 6;
  if (this->nf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nf());
  }

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Note::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.Note)
  GOOGLE_DCHECK_NE(&from, this);
  const Note* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Note>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.Note)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.Note)
    MergeFrom(*source);
  }
}

void Note::MergeFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.Note)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cm().size() > 0) {

    cm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cm_);
  }
  if (from.r().size() > 0) {

    r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  if (from.rho().size() > 0) {

    rho_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rho_);
  }
  if (from.apk().size() > 0) {

    apk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apk_);
  }
  if (from.nf().size() > 0) {

    nf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nf_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Note::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Note::CopyFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Note::IsInitialized() const {
  return true;
}

void Note::Swap(Note* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Note::InternalSwap(Note* other) {
  using std::swap;
  cm_.Swap(&other->cm_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  r_.Swap(&other->r_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rho_.Swap(&other->rho_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  apk_.Swap(&other->apk_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nf_.Swap(&other->nf_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Note::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JSInput::InitAsDefaultInstance() {
  ::zksnark::_JSInput_default_instance_._instance.get_mutable()->witnesspath_ = const_cast< ::zksnark::MerklePath*>(
      ::zksnark::MerklePath::internal_default_instance());
  ::zksnark::_JSInput_default_instance_._instance.get_mutable()->note_ = const_cast< ::zksnark::Note*>(
      ::zksnark::Note::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JSInput::kWitnessPathFieldNumber;
const int JSInput::kSpendingKeyFieldNumber;
const int JSInput::kNoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JSInput::JSInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zksnark_2eproto::scc_info_JSInput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.JSInput)
}
JSInput::JSInput(const JSInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spendingkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spendingkey().size() > 0) {
    spendingkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spendingkey_);
  }
  if (from.has_witnesspath()) {
    witnesspath_ = new ::zksnark::MerklePath(*from.witnesspath_);
  } else {
    witnesspath_ = NULL;
  }
  if (from.has_note()) {
    note_ = new ::zksnark::Note(*from.note_);
  } else {
    note_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zksnark.JSInput)
}

void JSInput::SharedCtor() {
  spendingkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&witnesspath_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&note_) -
      reinterpret_cast<char*>(&witnesspath_)) + sizeof(note_));
}

JSInput::~JSInput() {
  // @@protoc_insertion_point(destructor:zksnark.JSInput)
  SharedDtor();
}

void JSInput::SharedDtor() {
  spendingkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete witnesspath_;
  if (this != internal_default_instance()) delete note_;
}

void JSInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JSInput::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JSInput& JSInput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zksnark_2eproto::scc_info_JSInput.base);
  return *internal_default_instance();
}


void JSInput::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.JSInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spendingkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && witnesspath_ != NULL) {
    delete witnesspath_;
  }
  witnesspath_ = NULL;
  if (GetArenaNoVirtual() == NULL && note_ != NULL) {
    delete note_;
  }
  note_ = NULL;
  _internal_metadata_.Clear();
}

bool JSInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.JSInput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zksnark.MerklePath witnessPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_witnesspath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes spendingKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spendingkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zksnark.Note note = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_note()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.JSInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.JSInput)
  return false;
#undef DO_
}

void JSInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.JSInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zksnark.MerklePath witnessPath = 1;
  if (this->has_witnesspath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_witnesspath(), output);
  }

  // bytes spendingKey = 2;
  if (this->spendingkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->spendingkey(), output);
  }

  // .zksnark.Note note = 3;
  if (this->has_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_note(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.JSInput)
}

::google::protobuf::uint8* JSInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.JSInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zksnark.MerklePath witnessPath = 1;
  if (this->has_witnesspath()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_witnesspath(), deterministic, target);
  }

  // bytes spendingKey = 2;
  if (this->spendingkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->spendingkey(), target);
  }

  // .zksnark.Note note = 3;
  if (this->has_note()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_note(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.JSInput)
  return target;
}

size_t JSInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.JSInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes spendingKey = 2;
  if (this->spendingkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spendingkey());
  }

  // .zksnark.MerklePath witnessPath = 1;
  if (this->has_witnesspath()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *witnesspath_);
  }

  // .zksnark.Note note = 3;
  if (this->has_note()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *note_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JSInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.JSInput)
  GOOGLE_DCHECK_NE(&from, this);
  const JSInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JSInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.JSInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.JSInput)
    MergeFrom(*source);
  }
}

void JSInput::MergeFrom(const JSInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.JSInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spendingkey().size() > 0) {

    spendingkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spendingkey_);
  }
  if (from.has_witnesspath()) {
    mutable_witnesspath()->::zksnark::MerklePath::MergeFrom(from.witnesspath());
  }
  if (from.has_note()) {
    mutable_note()->::zksnark::Note::MergeFrom(from.note());
  }
}

void JSInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.JSInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JSInput::CopyFrom(const JSInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.JSInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSInput::IsInitialized() const {
  return true;
}

void JSInput::Swap(JSInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JSInput::InternalSwap(JSInput* other) {
  using std::swap;
  spendingkey_.Swap(&other->spendingkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(witnesspath_, other->witnesspath_);
  swap(note_, other->note_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JSInput::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProveRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProveRequest::kInputsFieldNumber;
const int ProveRequest::kOutNotesFieldNumber;
const int ProveRequest::kHsigFieldNumber;
const int ProveRequest::kPhiFieldNumber;
const int ProveRequest::kRtsFieldNumber;
const int ProveRequest::kRewardFieldNumber;
const int ProveRequest::kFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProveRequest::ProveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zksnark_2eproto::scc_info_ProveRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.ProveRequest)
}
ProveRequest::ProveRequest(const ProveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      inputs_(from.inputs_),
      outnotes_(from.outnotes_),
      rts_(from.rts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hsig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hsig().size() > 0) {
    hsig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hsig_);
  }
  phi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phi().size() > 0) {
    phi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phi_);
  }
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(fee_));
  // @@protoc_insertion_point(copy_constructor:zksnark.ProveRequest)
}

void ProveRequest::SharedCtor() {
  hsig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(fee_));
}

ProveRequest::~ProveRequest() {
  // @@protoc_insertion_point(destructor:zksnark.ProveRequest)
  SharedDtor();
}

void ProveRequest::SharedDtor() {
  hsig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProveRequest::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProveRequest& ProveRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zksnark_2eproto::scc_info_ProveRequest.base);
  return *internal_default_instance();
}


void ProveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.ProveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outnotes_.Clear();
  rts_.Clear();
  hsig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(fee_));
  _internal_metadata_.Clear();
}

bool ProveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.ProveRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zksnark.JSInput inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zksnark.Note outNotes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outnotes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hsig = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hsig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes phi = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes rts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_rts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 reward = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fee = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.ProveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.ProveRequest)
  return false;
#undef DO_
}

void ProveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.ProveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zksnark.JSInput inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->inputs(static_cast<int>(i)),
      output);
  }

  // repeated .zksnark.Note outNotes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outnotes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->outnotes(static_cast<int>(i)),
      output);
  }

  // bytes hsig = 3;
  if (this->hsig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->hsig(), output);
  }

  // bytes phi = 4;
  if (this->phi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->phi(), output);
  }

  // repeated bytes rts = 5;
  for (int i = 0, n = this->rts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->rts(i), output);
  }

  // uint64 reward = 6;
  if (this->reward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->reward(), output);
  }

  // uint64 fee = 7;
  if (this->fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fee(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.ProveRequest)
}

::google::protobuf::uint8* ProveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.ProveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zksnark.JSInput inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->inputs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .zksnark.Note outNotes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outnotes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->outnotes(static_cast<int>(i)), deterministic, target);
  }

  // bytes hsig = 3;
  if (this->hsig().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hsig(), target);
  }

  // bytes phi = 4;
  if (this->phi().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->phi(), target);
  }

  // repeated bytes rts = 5;
  for (int i = 0, n = this->rts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->rts(i), target);
  }

  // uint64 reward = 6;
  if (this->reward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->reward(), target);
  }

  // uint64 fee = 7;
  if (this->fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fee(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.ProveRequest)
  return target;
}

size_t ProveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.ProveRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .zksnark.JSInput inputs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .zksnark.Note outNotes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->outnotes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outnotes(static_cast<int>(i)));
    }
  }

  // repeated bytes rts = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rts_size());
  for (int i = 0, n = this->rts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->rts(i));
  }

  // bytes hsig = 3;
  if (this->hsig().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hsig());
  }

  // bytes phi = 4;
  if (this->phi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->phi());
  }

  // uint64 reward = 6;
  if (this->reward() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reward());
  }

  // uint64 fee = 7;
  if (this->fee() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fee());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.ProveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.ProveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.ProveRequest)
    MergeFrom(*source);
  }
}

void ProveRequest::MergeFrom(const ProveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.ProveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outnotes_.MergeFrom(from.outnotes_);
  rts_.MergeFrom(from.rts_);
  if (from.hsig().size() > 0) {

    hsig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hsig_);
  }
  if (from.phi().size() > 0) {

    phi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phi_);
  }
  if (from.reward() != 0) {
    set_reward(from.reward());
  }
  if (from.fee() != 0) {
    set_fee(from.fee());
  }
}

void ProveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.ProveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProveRequest::CopyFrom(const ProveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.ProveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProveRequest::IsInitialized() const {
  return true;
}

void ProveRequest::Swap(ProveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProveRequest::InternalSwap(ProveRequest* other) {
  using std::swap;
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  CastToBase(&outnotes_)->InternalSwap(CastToBase(&other->outnotes_));
  rts_.InternalSwap(CastToBase(&other->rts_));
  hsig_.Swap(&other->hsig_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phi_.Swap(&other->phi_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reward_, other->reward_);
  swap(fee_, other->fee_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProveRequest::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PHGRProof::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PHGRProof::kGAFieldNumber;
const int PHGRProof::kGAPrimeFieldNumber;
const int PHGRProof::kGBFieldNumber;
const int PHGRProof::kGBPrimeFieldNumber;
const int PHGRProof::kGCFieldNumber;
const int PHGRProof::kGCPrimeFieldNumber;
const int PHGRProof::kGKFieldNumber;
const int PHGRProof::kGHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PHGRProof::PHGRProof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zksnark_2eproto::scc_info_PHGRProof.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.PHGRProof)
}
PHGRProof::PHGRProof(const PHGRProof& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  g_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_a().size() > 0) {
    g_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_a_);
  }
  g_a_prime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_a_prime().size() > 0) {
    g_a_prime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_a_prime_);
  }
  g_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_b().size() > 0) {
    g_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_b_);
  }
  g_b_prime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_b_prime().size() > 0) {
    g_b_prime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_b_prime_);
  }
  g_c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_c().size() > 0) {
    g_c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_c_);
  }
  g_c_prime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_c_prime().size() > 0) {
    g_c_prime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_c_prime_);
  }
  g_k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_k().size() > 0) {
    g_k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_k_);
  }
  g_h_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g_h().size() > 0) {
    g_h_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_h_);
  }
  // @@protoc_insertion_point(copy_constructor:zksnark.PHGRProof)
}

void PHGRProof::SharedCtor() {
  g_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_a_prime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_b_prime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_c_prime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_k_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_h_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PHGRProof::~PHGRProof() {
  // @@protoc_insertion_point(destructor:zksnark.PHGRProof)
  SharedDtor();
}

void PHGRProof::SharedDtor() {
  g_a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_a_prime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_b_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_b_prime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_c_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_c_prime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_k_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_h_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PHGRProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PHGRProof::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PHGRProof& PHGRProof::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zksnark_2eproto::scc_info_PHGRProof.base);
  return *internal_default_instance();
}


void PHGRProof::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.PHGRProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  g_a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_a_prime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_b_prime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_c_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_c_prime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_h_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PHGRProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.PHGRProof)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes g_A = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_g_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes g_A_prime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_g_a_prime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes g_B = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_g_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes g_B_prime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_g_b_prime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes g_C = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_g_c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes g_C_prime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_g_c_prime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes g_K = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_g_k()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes g_H = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_g_h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.PHGRProof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.PHGRProof)
  return false;
#undef DO_
}

void PHGRProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.PHGRProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes g_A = 1;
  if (this->g_a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->g_a(), output);
  }

  // bytes g_A_prime = 2;
  if (this->g_a_prime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->g_a_prime(), output);
  }

  // bytes g_B = 3;
  if (this->g_b().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->g_b(), output);
  }

  // bytes g_B_prime = 4;
  if (this->g_b_prime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->g_b_prime(), output);
  }

  // bytes g_C = 5;
  if (this->g_c().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->g_c(), output);
  }

  // bytes g_C_prime = 6;
  if (this->g_c_prime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->g_c_prime(), output);
  }

  // bytes g_K = 7;
  if (this->g_k().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->g_k(), output);
  }

  // bytes g_H = 8;
  if (this->g_h().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->g_h(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.PHGRProof)
}

::google::protobuf::uint8* PHGRProof::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.PHGRProof)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes g_A = 1;
  if (this->g_a().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->g_a(), target);
  }

  // bytes g_A_prime = 2;
  if (this->g_a_prime().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->g_a_prime(), target);
  }

  // bytes g_B = 3;
  if (this->g_b().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->g_b(), target);
  }

  // bytes g_B_prime = 4;
  if (this->g_b_prime().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->g_b_prime(), target);
  }

  // bytes g_C = 5;
  if (this->g_c().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->g_c(), target);
  }

  // bytes g_C_prime = 6;
  if (this->g_c_prime().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->g_c_prime(), target);
  }

  // bytes g_K = 7;
  if (this->g_k().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->g_k(), target);
  }

  // bytes g_H = 8;
  if (this->g_h().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->g_h(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.PHGRProof)
  return target;
}

size_t PHGRProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.PHGRProof)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes g_A = 1;
  if (this->g_a().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->g_a());
  }

  // bytes g_A_prime = 2;
  if (this->g_a_prime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->g_a_prime());
  }

  // bytes g_B = 3;
  if (this->g_b().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->g_b());
  }

  // bytes g_B_prime = 4;
  if (this->g_b_prime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->g_b_prime());
  }

  // bytes g_C = 5;
  if (this->g_c().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->g_c());
  }

  // bytes g_C_prime = 6;
  if (this->g_c_prime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->g_c_prime());
  }

  // bytes g_K = 7;
  if (this->g_k().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->g_k());
  }

  // bytes g_H = 8;
  if (this->g_h().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->g_h());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PHGRProof::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.PHGRProof)
  GOOGLE_DCHECK_NE(&from, this);
  const PHGRProof* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PHGRProof>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.PHGRProof)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.PHGRProof)
    MergeFrom(*source);
  }
}

void PHGRProof::MergeFrom(const PHGRProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.PHGRProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.g_a().size() > 0) {

    g_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_a_);
  }
  if (from.g_a_prime().size() > 0) {

    g_a_prime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_a_prime_);
  }
  if (from.g_b().size() > 0) {

    g_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_b_);
  }
  if (from.g_b_prime().size() > 0) {

    g_b_prime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_b_prime_);
  }
  if (from.g_c().size() > 0) {

    g_c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_c_);
  }
  if (from.g_c_prime().size() > 0) {

    g_c_prime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_c_prime_);
  }
  if (from.g_k().size() > 0) {

    g_k_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_k_);
  }
  if (from.g_h().size() > 0) {

    g_h_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_h_);
  }
}

void PHGRProof::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.PHGRProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PHGRProof::CopyFrom(const PHGRProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.PHGRProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PHGRProof::IsInitialized() const {
  return true;
}

void PHGRProof::Swap(PHGRProof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PHGRProof::InternalSwap(PHGRProof* other) {
  using std::swap;
  g_a_.Swap(&other->g_a_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  g_a_prime_.Swap(&other->g_a_prime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  g_b_.Swap(&other->g_b_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  g_b_prime_.Swap(&other->g_b_prime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  g_c_.Swap(&other->g_c_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  g_c_prime_.Swap(&other->g_c_prime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  g_k_.Swap(&other->g_k_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  g_h_.Swap(&other->g_h_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PHGRProof::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProveReply::InitAsDefaultInstance() {
  ::zksnark::_ProveReply_default_instance_._instance.get_mutable()->proof_ = const_cast< ::zksnark::PHGRProof*>(
      ::zksnark::PHGRProof::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProveReply::kProofFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProveReply::ProveReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zksnark_2eproto::scc_info_ProveReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.ProveReply)
}
ProveReply::ProveReply(const ProveReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_proof()) {
    proof_ = new ::zksnark::PHGRProof(*from.proof_);
  } else {
    proof_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zksnark.ProveReply)
}

void ProveReply::SharedCtor() {
  proof_ = NULL;
}

ProveReply::~ProveReply() {
  // @@protoc_insertion_point(destructor:zksnark.ProveReply)
  SharedDtor();
}

void ProveReply::SharedDtor() {
  if (this != internal_default_instance()) delete proof_;
}

void ProveReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProveReply::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProveReply& ProveReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zksnark_2eproto::scc_info_ProveReply.base);
  return *internal_default_instance();
}


void ProveReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.ProveReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && proof_ != NULL) {
    delete proof_;
  }
  proof_ = NULL;
  _internal_metadata_.Clear();
}

bool ProveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.ProveReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zksnark.PHGRProof proof = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.ProveReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.ProveReply)
  return false;
#undef DO_
}

void ProveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.ProveReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zksnark.PHGRProof proof = 1;
  if (this->has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_proof(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.ProveReply)
}

::google::protobuf::uint8* ProveReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.ProveReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zksnark.PHGRProof proof = 1;
  if (this->has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_proof(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.ProveReply)
  return target;
}

size_t ProveReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.ProveReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .zksnark.PHGRProof proof = 1;
  if (this->has_proof()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proof_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProveReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.ProveReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ProveReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProveReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.ProveReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.ProveReply)
    MergeFrom(*source);
  }
}

void ProveReply::MergeFrom(const ProveReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.ProveReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_proof()) {
    mutable_proof()->::zksnark::PHGRProof::MergeFrom(from.proof());
  }
}

void ProveReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.ProveReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProveReply::CopyFrom(const ProveReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.ProveReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProveReply::IsInitialized() const {
  return true;
}

void ProveReply::Swap(ProveReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProveReply::InternalSwap(ProveReply* other) {
  using std::swap;
  swap(proof_, other->proof_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProveReply::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VerifyRequest::InitAsDefaultInstance() {
  ::zksnark::_VerifyRequest_default_instance_._instance.get_mutable()->proof_ = const_cast< ::zksnark::PHGRProof*>(
      ::zksnark::PHGRProof::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyRequest::kProofFieldNumber;
const int VerifyRequest::kHsigFieldNumber;
const int VerifyRequest::kRtsFieldNumber;
const int VerifyRequest::kNullifiersFieldNumber;
const int VerifyRequest::kCommitsFieldNumber;
const int VerifyRequest::kMacsFieldNumber;
const int VerifyRequest::kRewardFieldNumber;
const int VerifyRequest::kFeeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyRequest::VerifyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zksnark_2eproto::scc_info_VerifyRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.VerifyRequest)
}
VerifyRequest::VerifyRequest(const VerifyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      rts_(from.rts_),
      nullifiers_(from.nullifiers_),
      commits_(from.commits_),
      macs_(from.macs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hsig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hsig().size() > 0) {
    hsig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hsig_);
  }
  if (from.has_proof()) {
    proof_ = new ::zksnark::PHGRProof(*from.proof_);
  } else {
    proof_ = NULL;
  }
  ::memcpy(&reward_, &from.reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&fee_) -
    reinterpret_cast<char*>(&reward_)) + sizeof(fee_));
  // @@protoc_insertion_point(copy_constructor:zksnark.VerifyRequest)
}

void VerifyRequest::SharedCtor() {
  hsig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&proof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_) -
      reinterpret_cast<char*>(&proof_)) + sizeof(fee_));
}

VerifyRequest::~VerifyRequest() {
  // @@protoc_insertion_point(destructor:zksnark.VerifyRequest)
  SharedDtor();
}

void VerifyRequest::SharedDtor() {
  hsig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete proof_;
}

void VerifyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VerifyRequest::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyRequest& VerifyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zksnark_2eproto::scc_info_VerifyRequest.base);
  return *internal_default_instance();
}


void VerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.VerifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rts_.Clear();
  nullifiers_.Clear();
  commits_.Clear();
  macs_.Clear();
  hsig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && proof_ != NULL) {
    delete proof_;
  }
  proof_ = NULL;
  ::memset(&reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_) -
      reinterpret_cast<char*>(&reward_)) + sizeof(fee_));
  _internal_metadata_.Clear();
}

bool VerifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.VerifyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zksnark.PHGRProof proof = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_proof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hsig = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hsig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes rts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_rts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes nullifiers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_nullifiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes commits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_commits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes macs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_macs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 reward = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fee = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.VerifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.VerifyRequest)
  return false;
#undef DO_
}

void VerifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.VerifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zksnark.PHGRProof proof = 1;
  if (this->has_proof()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_proof(), output);
  }

  // bytes hsig = 2;
  if (this->hsig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hsig(), output);
  }

  // repeated bytes rts = 3;
  for (int i = 0, n = this->rts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->rts(i), output);
  }

  // repeated bytes nullifiers = 4;
  for (int i = 0, n = this->nullifiers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->nullifiers(i), output);
  }

  // repeated bytes commits = 5;
  for (int i = 0, n = this->commits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->commits(i), output);
  }

  // repeated bytes macs = 6;
  for (int i = 0, n = this->macs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->macs(i), output);
  }

  // uint64 reward = 7;
  if (this->reward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->reward(), output);
  }

  // uint64 fee = 8;
  if (this->fee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fee(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.VerifyRequest)
}

::google::protobuf::uint8* VerifyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.VerifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zksnark.PHGRProof proof = 1;
  if (this->has_proof()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_proof(), deterministic, target);
  }

  // bytes hsig = 2;
  if (this->hsig().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hsig(), target);
  }

  // repeated bytes rts = 3;
  for (int i = 0, n = this->rts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->rts(i), target);
  }

  // repeated bytes nullifiers = 4;
  for (int i = 0, n = this->nullifiers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->nullifiers(i), target);
  }

  // repeated bytes commits = 5;
  for (int i = 0, n = this->commits_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->commits(i), target);
  }

  // repeated bytes macs = 6;
  for (int i = 0, n = this->macs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->macs(i), target);
  }

  // uint64 reward = 7;
  if (this->reward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->reward(), target);
  }

  // uint64 fee = 8;
  if (this->fee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fee(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.VerifyRequest)
  return target;
}

size_t VerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.VerifyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes rts = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rts_size());
  for (int i = 0, n = this->rts_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->rts(i));
  }

  // repeated bytes nullifiers = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->nullifiers_size());
  for (int i = 0, n = this->nullifiers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->nullifiers(i));
  }

  // repeated bytes commits = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->commits_size());
  for (int i = 0, n = this->commits_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->commits(i));
  }

  // repeated bytes macs = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->macs_size());
  for (int i = 0, n = this->macs_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->macs(i));
  }

  // bytes hsig = 2;
  if (this->hsig().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hsig());
  }

  // .zksnark.PHGRProof proof = 1;
  if (this->has_proof()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *proof_);
  }

  // uint64 reward = 7;
  if (this->reward() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reward());
  }

  // uint64 fee = 8;
  if (this->fee() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fee());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.VerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.VerifyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.VerifyRequest)
    MergeFrom(*source);
  }
}

void VerifyRequest::MergeFrom(const VerifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.VerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rts_.MergeFrom(from.rts_);
  nullifiers_.MergeFrom(from.nullifiers_);
  commits_.MergeFrom(from.commits_);
  macs_.MergeFrom(from.macs_);
  if (from.hsig().size() > 0) {

    hsig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hsig_);
  }
  if (from.has_proof()) {
    mutable_proof()->::zksnark::PHGRProof::MergeFrom(from.proof());
  }
  if (from.reward() != 0) {
    set_reward(from.reward());
  }
  if (from.fee() != 0) {
    set_fee(from.fee());
  }
}

void VerifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.VerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyRequest::CopyFrom(const VerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.VerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyRequest::IsInitialized() const {
  return true;
}

void VerifyRequest::Swap(VerifyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyRequest::InternalSwap(VerifyRequest* other) {
  using std::swap;
  rts_.InternalSwap(CastToBase(&other->rts_));
  nullifiers_.InternalSwap(CastToBase(&other->nullifiers_));
  commits_.InternalSwap(CastToBase(&other->commits_));
  macs_.InternalSwap(CastToBase(&other->macs_));
  hsig_.Swap(&other->hsig_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(proof_, other->proof_);
  swap(reward_, other->reward_);
  swap(fee_, other->fee_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VerifyRequest::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VerifyReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VerifyReply::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VerifyReply::VerifyReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_zksnark_2eproto::scc_info_VerifyReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.VerifyReply)
}
VerifyReply::VerifyReply(const VerifyReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  valid_ = from.valid_;
  // @@protoc_insertion_point(copy_constructor:zksnark.VerifyReply)
}

void VerifyReply::SharedCtor() {
  valid_ = false;
}

VerifyReply::~VerifyReply() {
  // @@protoc_insertion_point(destructor:zksnark.VerifyReply)
  SharedDtor();
}

void VerifyReply::SharedDtor() {
}

void VerifyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VerifyReply::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VerifyReply& VerifyReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_zksnark_2eproto::scc_info_VerifyReply.base);
  return *internal_default_instance();
}


void VerifyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.VerifyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  valid_ = false;
  _internal_metadata_.Clear();
}

bool VerifyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.VerifyReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool valid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.VerifyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.VerifyReply)
  return false;
#undef DO_
}

void VerifyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.VerifyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.VerifyReply)
}

::google::protobuf::uint8* VerifyReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.VerifyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->valid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.VerifyReply)
  return target;
}

size_t VerifyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.VerifyReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool valid = 1;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.VerifyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VerifyReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.VerifyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.VerifyReply)
    MergeFrom(*source);
  }
}

void VerifyReply::MergeFrom(const VerifyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.VerifyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.valid() != 0) {
    set_valid(from.valid());
  }
}

void VerifyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.VerifyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyReply::CopyFrom(const VerifyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.VerifyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyReply::IsInitialized() const {
  return true;
}

void VerifyReply::Swap(VerifyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VerifyReply::InternalSwap(VerifyReply* other) {
  using std::swap;
  swap(valid_, other->valid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VerifyReply::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zksnark
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zksnark::MerkleHash* Arena::CreateMaybeMessage< ::zksnark::MerkleHash >(Arena* arena) {
  return Arena::CreateInternal< ::zksnark::MerkleHash >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zksnark::MerklePath* Arena::CreateMaybeMessage< ::zksnark::MerklePath >(Arena* arena) {
  return Arena::CreateInternal< ::zksnark::MerklePath >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zksnark::Note* Arena::CreateMaybeMessage< ::zksnark::Note >(Arena* arena) {
  return Arena::CreateInternal< ::zksnark::Note >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zksnark::JSInput* Arena::CreateMaybeMessage< ::zksnark::JSInput >(Arena* arena) {
  return Arena::CreateInternal< ::zksnark::JSInput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zksnark::ProveRequest* Arena::CreateMaybeMessage< ::zksnark::ProveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::zksnark::ProveRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zksnark::PHGRProof* Arena::CreateMaybeMessage< ::zksnark::PHGRProof >(Arena* arena) {
  return Arena::CreateInternal< ::zksnark::PHGRProof >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zksnark::ProveReply* Arena::CreateMaybeMessage< ::zksnark::ProveReply >(Arena* arena) {
  return Arena::CreateInternal< ::zksnark::ProveReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zksnark::VerifyRequest* Arena::CreateMaybeMessage< ::zksnark::VerifyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::zksnark::VerifyRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zksnark::VerifyReply* Arena::CreateMaybeMessage< ::zksnark::VerifyReply >(Arena* arena) {
  return Arena::CreateInternal< ::zksnark::VerifyReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
