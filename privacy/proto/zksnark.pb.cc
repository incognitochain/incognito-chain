// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zksnark.proto

#include "zksnark.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace zksnark {
class MerkleHashDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MerkleHash>
      _instance;
} _MerkleHash_default_instance_;
class MerklePathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MerklePath>
      _instance;
} _MerklePath_default_instance_;
class NoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Note>
      _instance;
} _Note_default_instance_;
class JSInputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JSInput>
      _instance;
} _JSInput_default_instance_;
class ProveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProveRequest>
      _instance;
} _ProveRequest_default_instance_;
class ProveReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProveReply>
      _instance;
} _ProveReply_default_instance_;
}  // namespace zksnark
namespace protobuf_zksnark_2eproto {
void InitDefaultsMerkleHashImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::zksnark::_MerkleHash_default_instance_;
    new (ptr) ::zksnark::MerkleHash();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::MerkleHash::InitAsDefaultInstance();
}

void InitDefaultsMerkleHash() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMerkleHashImpl);
}

void InitDefaultsMerklePathImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_zksnark_2eproto::InitDefaultsMerkleHash();
  {
    void* ptr = &::zksnark::_MerklePath_default_instance_;
    new (ptr) ::zksnark::MerklePath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::MerklePath::InitAsDefaultInstance();
}

void InitDefaultsMerklePath() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMerklePathImpl);
}

void InitDefaultsNoteImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::zksnark::_Note_default_instance_;
    new (ptr) ::zksnark::Note();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::Note::InitAsDefaultInstance();
}

void InitDefaultsNote() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNoteImpl);
}

void InitDefaultsJSInputImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_zksnark_2eproto::InitDefaultsMerklePath();
  protobuf_zksnark_2eproto::InitDefaultsNote();
  {
    void* ptr = &::zksnark::_JSInput_default_instance_;
    new (ptr) ::zksnark::JSInput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::JSInput::InitAsDefaultInstance();
}

void InitDefaultsJSInput() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsJSInputImpl);
}

void InitDefaultsProveRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_zksnark_2eproto::InitDefaultsJSInput();
  protobuf_zksnark_2eproto::InitDefaultsNote();
  {
    void* ptr = &::zksnark::_ProveRequest_default_instance_;
    new (ptr) ::zksnark::ProveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::ProveRequest::InitAsDefaultInstance();
}

void InitDefaultsProveRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProveRequestImpl);
}

void InitDefaultsProveReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::zksnark::_ProveReply_default_instance_;
    new (ptr) ::zksnark::ProveReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zksnark::ProveReply::InitAsDefaultInstance();
}

void InitDefaultsProveReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsProveReplyImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::MerkleHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::MerkleHash, hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::MerklePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::MerklePath, authpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::MerklePath, index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, cm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, rho_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, apk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::Note, nf_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::JSInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::JSInput, witnesspath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::JSInput, spendingkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::JSInput, note_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, inputs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, outnotes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, hsig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, phi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveRequest, rt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::zksnark::ProveReply, dummy_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zksnark::MerkleHash)},
  { 6, -1, sizeof(::zksnark::MerklePath)},
  { 13, -1, sizeof(::zksnark::Note)},
  { 24, -1, sizeof(::zksnark::JSInput)},
  { 32, -1, sizeof(::zksnark::ProveRequest)},
  { 42, -1, sizeof(::zksnark::ProveReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_MerkleHash_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_MerklePath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_Note_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_JSInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_ProveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zksnark::_ProveReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "zksnark.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rzksnark.proto\022\007zksnark\"\032\n\nMerkleHash\022\014"
      "\n\004hash\030\001 \001(\014\"B\n\nMerklePath\022%\n\010authPath\030\001"
      " \003(\0132\023.zksnark.MerkleHash\022\r\n\005index\030\002 \003(\010"
      "\"R\n\004Note\022\r\n\005value\030\001 \001(\004\022\n\n\002cm\030\002 \001(\014\022\t\n\001r"
      "\030\003 \001(\014\022\013\n\003rho\030\004 \001(\014\022\013\n\003apk\030\005 \001(\014\022\n\n\002nf\030\006"
      " \001(\014\"e\n\007JSInput\022(\n\013witnessPath\030\001 \001(\0132\023.z"
      "ksnark.MerklePath\022\023\n\013spendingKey\030\002 \001(\014\022\033"
      "\n\004note\030\003 \001(\0132\r.zksnark.Note\"x\n\014ProveRequ"
      "est\022 \n\006inputs\030\001 \003(\0132\020.zksnark.JSInput\022\037\n"
      "\010outNotes\030\002 \003(\0132\r.zksnark.Note\022\014\n\004hsig\030\003"
      " \001(\014\022\013\n\003phi\030\004 \001(\014\022\n\n\002rt\030\005 \001(\014\"\033\n\nProveRe"
      "ply\022\r\n\005dummy\030\001 \001(\t2@\n\007Zksnark\0225\n\005Prove\022\025"
      ".zksnark.ProveRequest\032\023.zksnark.ProveRep"
      "ly\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 532);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zksnark.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_zksnark_2eproto
namespace zksnark {

// ===================================================================

void MerkleHash::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MerkleHash::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MerkleHash::MerkleHash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_zksnark_2eproto::InitDefaultsMerkleHash();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.MerkleHash)
}
MerkleHash::MerkleHash(const MerkleHash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:zksnark.MerkleHash)
}

void MerkleHash::SharedCtor() {
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MerkleHash::~MerkleHash() {
  // @@protoc_insertion_point(destructor:zksnark.MerkleHash)
  SharedDtor();
}

void MerkleHash::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MerkleHash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MerkleHash::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MerkleHash& MerkleHash::default_instance() {
  ::protobuf_zksnark_2eproto::InitDefaultsMerkleHash();
  return *internal_default_instance();
}

MerkleHash* MerkleHash::New(::google::protobuf::Arena* arena) const {
  MerkleHash* n = new MerkleHash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MerkleHash::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.MerkleHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MerkleHash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.MerkleHash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.MerkleHash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.MerkleHash)
  return false;
#undef DO_
}

void MerkleHash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.MerkleHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.MerkleHash)
}

::google::protobuf::uint8* MerkleHash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.MerkleHash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.MerkleHash)
  return target;
}

size_t MerkleHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.MerkleHash)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MerkleHash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.MerkleHash)
  GOOGLE_DCHECK_NE(&from, this);
  const MerkleHash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MerkleHash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.MerkleHash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.MerkleHash)
    MergeFrom(*source);
  }
}

void MerkleHash::MergeFrom(const MerkleHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.MerkleHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void MerkleHash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.MerkleHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerkleHash::CopyFrom(const MerkleHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.MerkleHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerkleHash::IsInitialized() const {
  return true;
}

void MerkleHash::Swap(MerkleHash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MerkleHash::InternalSwap(MerkleHash* other) {
  using std::swap;
  hash_.Swap(&other->hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MerkleHash::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MerklePath::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MerklePath::kAuthPathFieldNumber;
const int MerklePath::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MerklePath::MerklePath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_zksnark_2eproto::InitDefaultsMerklePath();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.MerklePath)
}
MerklePath::MerklePath(const MerklePath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      authpath_(from.authpath_),
      index_(from.index_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zksnark.MerklePath)
}

void MerklePath::SharedCtor() {
  _cached_size_ = 0;
}

MerklePath::~MerklePath() {
  // @@protoc_insertion_point(destructor:zksnark.MerklePath)
  SharedDtor();
}

void MerklePath::SharedDtor() {
}

void MerklePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MerklePath::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MerklePath& MerklePath::default_instance() {
  ::protobuf_zksnark_2eproto::InitDefaultsMerklePath();
  return *internal_default_instance();
}

MerklePath* MerklePath::New(::google::protobuf::Arena* arena) const {
  MerklePath* n = new MerklePath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MerklePath::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.MerklePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authpath_.Clear();
  index_.Clear();
  _internal_metadata_.Clear();
}

bool MerklePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.MerklePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zksnark.MerkleHash authPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_authpath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18u, input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.MerklePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.MerklePath)
  return false;
#undef DO_
}

void MerklePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.MerklePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zksnark.MerkleHash authPath = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->authpath_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->authpath(static_cast<int>(i)), output);
  }

  // repeated bool index = 2;
  if (this->index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _index_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->index().data(), this->index_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.MerklePath)
}

::google::protobuf::uint8* MerklePath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.MerklePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zksnark.MerkleHash authPath = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->authpath_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->authpath(static_cast<int>(i)), deterministic, target);
  }

  // repeated bool index = 2;
  if (this->index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _index_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->index_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.MerklePath)
  return target;
}

size_t MerklePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.MerklePath)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .zksnark.MerkleHash authPath = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->authpath_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->authpath(static_cast<int>(i)));
    }
  }

  // repeated bool index = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->index_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MerklePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.MerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  const MerklePath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MerklePath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.MerklePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.MerklePath)
    MergeFrom(*source);
  }
}

void MerklePath::MergeFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.MerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authpath_.MergeFrom(from.authpath_);
  index_.MergeFrom(from.index_);
}

void MerklePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.MerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerklePath::CopyFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.MerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerklePath::IsInitialized() const {
  return true;
}

void MerklePath::Swap(MerklePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MerklePath::InternalSwap(MerklePath* other) {
  using std::swap;
  authpath_.InternalSwap(&other->authpath_);
  index_.InternalSwap(&other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MerklePath::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Note::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Note::kValueFieldNumber;
const int Note::kCmFieldNumber;
const int Note::kRFieldNumber;
const int Note::kRhoFieldNumber;
const int Note::kApkFieldNumber;
const int Note::kNfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Note::Note()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_zksnark_2eproto::InitDefaultsNote();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.Note)
}
Note::Note(const Note& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cm().size() > 0) {
    cm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cm_);
  }
  r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.r().size() > 0) {
    r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  rho_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rho().size() > 0) {
    rho_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rho_);
  }
  apk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.apk().size() > 0) {
    apk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apk_);
  }
  nf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nf().size() > 0) {
    nf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nf_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zksnark.Note)
}

void Note::SharedCtor() {
  cm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rho_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Note::~Note() {
  // @@protoc_insertion_point(destructor:zksnark.Note)
  SharedDtor();
}

void Note::SharedDtor() {
  cm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rho_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Note::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Note::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Note& Note::default_instance() {
  ::protobuf_zksnark_2eproto::InitDefaultsNote();
  return *internal_default_instance();
}

Note* Note::New(::google::protobuf::Arena* arena) const {
  Note* n = new Note;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Note::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rho_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Note::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.Note)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes r = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes rho = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rho()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes apk = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_apk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.Note)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.Note)
  return false;
#undef DO_
}

void Note::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }

  // bytes cm = 2;
  if (this->cm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cm(), output);
  }

  // bytes r = 3;
  if (this->r().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->r(), output);
  }

  // bytes rho = 4;
  if (this->rho().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->rho(), output);
  }

  // bytes apk = 5;
  if (this->apk().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->apk(), output);
  }

  // bytes nf = 6;
  if (this->nf().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->nf(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.Note)
}

::google::protobuf::uint8* Note::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }

  // bytes cm = 2;
  if (this->cm().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cm(), target);
  }

  // bytes r = 3;
  if (this->r().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->r(), target);
  }

  // bytes rho = 4;
  if (this->rho().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->rho(), target);
  }

  // bytes apk = 5;
  if (this->apk().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->apk(), target);
  }

  // bytes nf = 6;
  if (this->nf().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->nf(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.Note)
  return target;
}

size_t Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.Note)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes cm = 2;
  if (this->cm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cm());
  }

  // bytes r = 3;
  if (this->r().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->r());
  }

  // bytes rho = 4;
  if (this->rho().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rho());
  }

  // bytes apk = 5;
  if (this->apk().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->apk());
  }

  // bytes nf = 6;
  if (this->nf().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nf());
  }

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Note::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.Note)
  GOOGLE_DCHECK_NE(&from, this);
  const Note* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Note>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.Note)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.Note)
    MergeFrom(*source);
  }
}

void Note::MergeFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.Note)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cm().size() > 0) {

    cm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cm_);
  }
  if (from.r().size() > 0) {

    r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  if (from.rho().size() > 0) {

    rho_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rho_);
  }
  if (from.apk().size() > 0) {

    apk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apk_);
  }
  if (from.nf().size() > 0) {

    nf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nf_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Note::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Note::CopyFrom(const Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Note::IsInitialized() const {
  return true;
}

void Note::Swap(Note* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Note::InternalSwap(Note* other) {
  using std::swap;
  cm_.Swap(&other->cm_);
  r_.Swap(&other->r_);
  rho_.Swap(&other->rho_);
  apk_.Swap(&other->apk_);
  nf_.Swap(&other->nf_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Note::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JSInput::InitAsDefaultInstance() {
  ::zksnark::_JSInput_default_instance_._instance.get_mutable()->witnesspath_ = const_cast< ::zksnark::MerklePath*>(
      ::zksnark::MerklePath::internal_default_instance());
  ::zksnark::_JSInput_default_instance_._instance.get_mutable()->note_ = const_cast< ::zksnark::Note*>(
      ::zksnark::Note::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JSInput::kWitnessPathFieldNumber;
const int JSInput::kSpendingKeyFieldNumber;
const int JSInput::kNoteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JSInput::JSInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_zksnark_2eproto::InitDefaultsJSInput();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.JSInput)
}
JSInput::JSInput(const JSInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spendingkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spendingkey().size() > 0) {
    spendingkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spendingkey_);
  }
  if (from.has_witnesspath()) {
    witnesspath_ = new ::zksnark::MerklePath(*from.witnesspath_);
  } else {
    witnesspath_ = NULL;
  }
  if (from.has_note()) {
    note_ = new ::zksnark::Note(*from.note_);
  } else {
    note_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zksnark.JSInput)
}

void JSInput::SharedCtor() {
  spendingkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&witnesspath_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&note_) -
      reinterpret_cast<char*>(&witnesspath_)) + sizeof(note_));
  _cached_size_ = 0;
}

JSInput::~JSInput() {
  // @@protoc_insertion_point(destructor:zksnark.JSInput)
  SharedDtor();
}

void JSInput::SharedDtor() {
  spendingkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete witnesspath_;
  if (this != internal_default_instance()) delete note_;
}

void JSInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JSInput::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JSInput& JSInput::default_instance() {
  ::protobuf_zksnark_2eproto::InitDefaultsJSInput();
  return *internal_default_instance();
}

JSInput* JSInput::New(::google::protobuf::Arena* arena) const {
  JSInput* n = new JSInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JSInput::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.JSInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spendingkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && witnesspath_ != NULL) {
    delete witnesspath_;
  }
  witnesspath_ = NULL;
  if (GetArenaNoVirtual() == NULL && note_ != NULL) {
    delete note_;
  }
  note_ = NULL;
  _internal_metadata_.Clear();
}

bool JSInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.JSInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zksnark.MerklePath witnessPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_witnesspath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes spendingKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spendingkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zksnark.Note note = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_note()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.JSInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.JSInput)
  return false;
#undef DO_
}

void JSInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.JSInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zksnark.MerklePath witnessPath = 1;
  if (this->has_witnesspath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->witnesspath_, output);
  }

  // bytes spendingKey = 2;
  if (this->spendingkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->spendingkey(), output);
  }

  // .zksnark.Note note = 3;
  if (this->has_note()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->note_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.JSInput)
}

::google::protobuf::uint8* JSInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.JSInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zksnark.MerklePath witnessPath = 1;
  if (this->has_witnesspath()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->witnesspath_, deterministic, target);
  }

  // bytes spendingKey = 2;
  if (this->spendingkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->spendingkey(), target);
  }

  // .zksnark.Note note = 3;
  if (this->has_note()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->note_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.JSInput)
  return target;
}

size_t JSInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.JSInput)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes spendingKey = 2;
  if (this->spendingkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->spendingkey());
  }

  // .zksnark.MerklePath witnessPath = 1;
  if (this->has_witnesspath()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->witnesspath_);
  }

  // .zksnark.Note note = 3;
  if (this->has_note()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->note_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JSInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.JSInput)
  GOOGLE_DCHECK_NE(&from, this);
  const JSInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JSInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.JSInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.JSInput)
    MergeFrom(*source);
  }
}

void JSInput::MergeFrom(const JSInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.JSInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spendingkey().size() > 0) {

    spendingkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spendingkey_);
  }
  if (from.has_witnesspath()) {
    mutable_witnesspath()->::zksnark::MerklePath::MergeFrom(from.witnesspath());
  }
  if (from.has_note()) {
    mutable_note()->::zksnark::Note::MergeFrom(from.note());
  }
}

void JSInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.JSInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JSInput::CopyFrom(const JSInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.JSInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSInput::IsInitialized() const {
  return true;
}

void JSInput::Swap(JSInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JSInput::InternalSwap(JSInput* other) {
  using std::swap;
  spendingkey_.Swap(&other->spendingkey_);
  swap(witnesspath_, other->witnesspath_);
  swap(note_, other->note_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JSInput::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProveRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProveRequest::kInputsFieldNumber;
const int ProveRequest::kOutNotesFieldNumber;
const int ProveRequest::kHsigFieldNumber;
const int ProveRequest::kPhiFieldNumber;
const int ProveRequest::kRtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProveRequest::ProveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_zksnark_2eproto::InitDefaultsProveRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.ProveRequest)
}
ProveRequest::ProveRequest(const ProveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      inputs_(from.inputs_),
      outnotes_(from.outnotes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hsig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hsig().size() > 0) {
    hsig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hsig_);
  }
  phi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phi().size() > 0) {
    phi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phi_);
  }
  rt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rt().size() > 0) {
    rt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rt_);
  }
  // @@protoc_insertion_point(copy_constructor:zksnark.ProveRequest)
}

void ProveRequest::SharedCtor() {
  hsig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phi_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ProveRequest::~ProveRequest() {
  // @@protoc_insertion_point(destructor:zksnark.ProveRequest)
  SharedDtor();
}

void ProveRequest::SharedDtor() {
  hsig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phi_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProveRequest::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProveRequest& ProveRequest::default_instance() {
  ::protobuf_zksnark_2eproto::InitDefaultsProveRequest();
  return *internal_default_instance();
}

ProveRequest* ProveRequest::New(::google::protobuf::Arena* arena) const {
  ProveRequest* n = new ProveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.ProveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outnotes_.Clear();
  hsig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ProveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.ProveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zksnark.JSInput inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zksnark.Note outNotes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_outnotes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hsig = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hsig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes phi = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes rt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.ProveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.ProveRequest)
  return false;
#undef DO_
}

void ProveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.ProveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zksnark.JSInput inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->inputs(static_cast<int>(i)), output);
  }

  // repeated .zksnark.Note outNotes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outnotes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->outnotes(static_cast<int>(i)), output);
  }

  // bytes hsig = 3;
  if (this->hsig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->hsig(), output);
  }

  // bytes phi = 4;
  if (this->phi().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->phi(), output);
  }

  // bytes rt = 5;
  if (this->rt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->rt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.ProveRequest)
}

::google::protobuf::uint8* ProveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.ProveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zksnark.JSInput inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->inputs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .zksnark.Note outNotes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outnotes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->outnotes(static_cast<int>(i)), deterministic, target);
  }

  // bytes hsig = 3;
  if (this->hsig().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hsig(), target);
  }

  // bytes phi = 4;
  if (this->phi().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->phi(), target);
  }

  // bytes rt = 5;
  if (this->rt().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->rt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.ProveRequest)
  return target;
}

size_t ProveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.ProveRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .zksnark.JSInput inputs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .zksnark.Note outNotes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->outnotes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outnotes(static_cast<int>(i)));
    }
  }

  // bytes hsig = 3;
  if (this->hsig().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hsig());
  }

  // bytes phi = 4;
  if (this->phi().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->phi());
  }

  // bytes rt = 5;
  if (this->rt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.ProveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.ProveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.ProveRequest)
    MergeFrom(*source);
  }
}

void ProveRequest::MergeFrom(const ProveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.ProveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outnotes_.MergeFrom(from.outnotes_);
  if (from.hsig().size() > 0) {

    hsig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hsig_);
  }
  if (from.phi().size() > 0) {

    phi_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phi_);
  }
  if (from.rt().size() > 0) {

    rt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rt_);
  }
}

void ProveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.ProveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProveRequest::CopyFrom(const ProveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.ProveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProveRequest::IsInitialized() const {
  return true;
}

void ProveRequest::Swap(ProveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProveRequest::InternalSwap(ProveRequest* other) {
  using std::swap;
  inputs_.InternalSwap(&other->inputs_);
  outnotes_.InternalSwap(&other->outnotes_);
  hsig_.Swap(&other->hsig_);
  phi_.Swap(&other->phi_);
  rt_.Swap(&other->rt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProveRequest::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProveReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProveReply::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProveReply::ProveReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_zksnark_2eproto::InitDefaultsProveReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zksnark.ProveReply)
}
ProveReply::ProveReply(const ProveReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dummy().size() > 0) {
    dummy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dummy_);
  }
  // @@protoc_insertion_point(copy_constructor:zksnark.ProveReply)
}

void ProveReply::SharedCtor() {
  dummy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ProveReply::~ProveReply() {
  // @@protoc_insertion_point(destructor:zksnark.ProveReply)
  SharedDtor();
}

void ProveReply::SharedDtor() {
  dummy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProveReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProveReply::descriptor() {
  ::protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProveReply& ProveReply::default_instance() {
  ::protobuf_zksnark_2eproto::InitDefaultsProveReply();
  return *internal_default_instance();
}

ProveReply* ProveReply::New(::google::protobuf::Arena* arena) const {
  ProveReply* n = new ProveReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProveReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zksnark.ProveReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dummy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ProveReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zksnark.ProveReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string dummy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dummy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dummy().data(), static_cast<int>(this->dummy().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zksnark.ProveReply.dummy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zksnark.ProveReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zksnark.ProveReply)
  return false;
#undef DO_
}

void ProveReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zksnark.ProveReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dummy = 1;
  if (this->dummy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dummy().data(), static_cast<int>(this->dummy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zksnark.ProveReply.dummy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dummy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:zksnark.ProveReply)
}

::google::protobuf::uint8* ProveReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zksnark.ProveReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dummy = 1;
  if (this->dummy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dummy().data(), static_cast<int>(this->dummy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zksnark.ProveReply.dummy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dummy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zksnark.ProveReply)
  return target;
}

size_t ProveReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zksnark.ProveReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string dummy = 1;
  if (this->dummy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dummy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProveReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zksnark.ProveReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ProveReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProveReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zksnark.ProveReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zksnark.ProveReply)
    MergeFrom(*source);
  }
}

void ProveReply::MergeFrom(const ProveReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zksnark.ProveReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dummy().size() > 0) {

    dummy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dummy_);
  }
}

void ProveReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zksnark.ProveReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProveReply::CopyFrom(const ProveReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zksnark.ProveReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProveReply::IsInitialized() const {
  return true;
}

void ProveReply::Swap(ProveReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProveReply::InternalSwap(ProveReply* other) {
  using std::swap;
  dummy_.Swap(&other->dummy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProveReply::GetMetadata() const {
  protobuf_zksnark_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_zksnark_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zksnark

// @@protoc_insertion_point(global_scope)
